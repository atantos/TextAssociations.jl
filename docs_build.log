┌ Debug: interpret_repo_and_remotes
│   remotes_checked = Documenter.RemoteRepository[]
│   repo_normalized = Documenter.Remotes.URL("https://github.com/atantos/TextAssociations.jl", nothing)
│   makedocs_root_remoteref = nothing
│   makedocs_root_repo = /Users/atantos/Documents/julia/packages/TextAssociations
│   makedocs_root_remote = Documenter.Remotes.GitHub("atantos", "TextAssociations.jl")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/documents.jl:598
┌ Debug: Remotes: using automatically determined remote
│   makedocs_root_remoteref = nothing
│   makedocs_root_repo = /Users/atantos/Documents/julia/packages/TextAssociations
│   makedocs_root_remote = Documenter.Remotes.GitHub("atantos", "TextAssociations.jl")
│   repo_normalized = Documenter.Remotes.URL("https://github.com/atantos/TextAssociations.jl", nothing)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/documents.jl:663
┌ Debug: Document: remotes
│   remote = Documenter.Remotes.URL("https://github.com/atantos/TextAssociations.jl", nothing)
│   remotes = Documenter.RemoteRepository[Documenter.RemoteRepository("/Users/atantos/Documents/julia/packages/TextAssociations", Documenter.Remotes.URL("https://github.com/atantos/TextAssociations.jl", nothing), "e537f792371589d66b3eca0c76df61b363998cb1")]
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/documents.jl:457
┌ Info: SetupBuildDirectory: setting up build directory.
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/builder_pipeline.jl:75
┌ Info: Doctest: running doctests.
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/builder_pipeline.jl:209
┌ Debug: Running doctests.
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/doctests.jl:30
┌ Info: ExpandTemplates: expanding markdown templates.
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/builder_pipeline.jl:223
┌ Debug: pages
│   keys(doc.blueprint.pages) = ["metrics/information_theoretic.md", "contributing.md", "guide/preprocessing.md", "api/functions.md", "howto.md", "performance.md", "guide/corpus_analysis.md", "advanced/temporal.md", "metrics/statistical.md", "getting_started/tutorial.md", "metrics/overview.md", "getting_started/installation.md", "getting_started/examples.md", "theory.md", "api/types.md", "guide/choosing_metrics.md", "troubleshooting.md", "reference.md", "index.md", "tutorial.md", "guide/concepts.md"]
│   priority_pages = String[]
│   normal_pages = ["advanced/temporal.md", "api/functions.md", "api/types.md", "contributing.md", "getting_started/examples.md", "getting_started/installation.md", "getting_started/tutorial.md", "guide/choosing_metrics.md", "guide/concepts.md", "guide/corpus_analysis.md", "guide/preprocessing.md", "howto.md", "index.md", "metrics/information_theoretic.md", "metrics/overview.md", "metrics/statistical.md", "performance.md", "reference.md", "theory.md", "troubleshooting.md", "tutorial.md"]
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:51
┌ Debug: Running ExpanderPipeline on advanced/temporal.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @meta block:
│ CurrentModule = TextAssociations
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:337
┌ Debug: Evaluating @example block:
│ using TextAssociations, Dates, DataFrames
│ 
│ # Create corpus with temporal metadata
│ texts = [
│     ("Early computers used vacuum tubes.", Date(1950)),
│     ("Transistors replaced vacuum tubes.", Date(1960)),
│     ("Integrated circuits revolutionized computing.", Date(1970)),
│     ("Microprocessors enabled personal computers.", Date(1980)),
│     ("Internet connected computers globally.", Date(1990)),
│     ("Cloud computing emerged as dominant paradigm.", Date(2000)),
│     ("AI and machine learning transform computing.", Date(2010)),
│     ("Quantum computing shows promise.", Date(2020))
│ ]
│ 
│ # Create corpus with temporal metadata
│ df = DataFrame(
│     text = [t[1] for t in texts],
│     year = [year(t[2]) for t in texts]
│ )
│ 
│ corpus = read_corpus_df(df;
│     text_column=:text,
│     metadata_columns=[:year]
│ )
│ 
│ # Analyze temporal trends
│ temporal = analyze_temporal(
│     corpus,
│     ["computing", "computers"],
│     :year,
│     PMI;
│     time_bins=4,
│     windowsize=5,
│     minfreq=1
│ )
│ 
│ println("Temporal Analysis Results:")
│ println("Time periods analyzed: ", temporal.time_periods)
│ 
│ if !isempty(temporal.trend_analysis)
│     println("\nTop trending associations:")
│     trending = first(sort(temporal.trend_analysis, :Correlation, rev=true), 5)
│     for row in eachrow(trending)
│         println("  $(row.Node) + $(row.Collocate): r=$(round(row.Correlation, digits=2))")
│     end
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/advanced/temporal.md:15-62
│ ```@example basic_temporal
│ using TextAssociations, Dates, DataFrames
│ 
│ # Create corpus with temporal metadata
│ texts = [
│     ("Early computers used vacuum tubes.", Date(1950)),
│     ("Transistors replaced vacuum tubes.", Date(1960)),
│     ("Integrated circuits revolutionized computing.", Date(1970)),
│     ("Microprocessors enabled personal computers.", Date(1980)),
│     ("Internet connected computers globally.", Date(1990)),
│     ("Cloud computing emerged as dominant paradigm.", Date(2000)),
│     ("AI and machine learning transform computing.", Date(2010)),
│     ("Quantum computing shows promise.", Date(2020))
│ ]
│ 
│ # Create corpus with temporal metadata
│ df = DataFrame(
│     text = [t[1] for t in texts],
│     year = [year(t[2]) for t in texts]
│ )
│ 
│ corpus = read_corpus_df(df;
│     text_column=:text,
│     metadata_columns=[:year]
│ )
│ 
│ # Analyze temporal trends
│ temporal = analyze_temporal(
│     corpus,
│     ["computing", "computers"],
│     :year,
│     PMI;
│     time_bins=4,
│     windowsize=5,
│     minfreq=1
│ )
│ 
│ println("Temporal Analysis Results:")
│ println("Time periods analyzed: ", temporal.time_periods)
│ 
│ if !isempty(temporal.trend_analysis)
│     println("\nTop trending associations:")
│     trending = first(sort(temporal.trend_analysis, :Correlation, rev=true), 5)
│     for row in eachrow(trending)
│         println("  $(row.Node) + $(row.Collocate): r=$(round(row.Correlation, digits=2))")
│     end
│ end
│ ```
│   exception = (ArgumentError("No documents have the specified time field: year"), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x000000019e5ec6bf, Ptr{Nothing} @0x000000019e5ed591, Ptr{Nothing} @0x000000019e5ed6a0, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__basic_temporal at statement 7, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations, Statistics
│ 
│ function identify_emerging_terms(temporal_analysis::TemporalCorpusAnalysis,
│                                 threshold::Float64=0.5)
│     trends = temporal_analysis.trend_analysis
│ 
│     # Filter for positive trends
│     emerging = filter(row -> row.Correlation > threshold, trends)
│ 
│     # Sort by slope (rate of change)
│     sort!(emerging, :Slope, rev=true)
│ 
│     println("Emerging Terms (correlation > $threshold):")
│     for row in eachrow(first(emerging, 10))
│         trend = row.Slope > 0 ? "↑" : "↓"
│         println("  $(row.Node) + $(row.Collocate): $trend slope=$(round(row.Slope, digits=3))")
│     end
│ 
│     return emerging
│ end
│ 
│ # Apply to our temporal analysis
│ # emerging_terms = identify_emerging_terms(temporal)
│ println("\nNote: Full trend detection requires more data points")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function identify_declining_terms(temporal_analysis::TemporalCorpusAnalysis)
│     trends = temporal_analysis.trend_analysis
│ 
│     # Filter for negative trends
│     declining = filter(row -> row.Correlation < -0.3, trends)
│ 
│     println("Declining Associations:")
│     if !isempty(declining)
│         for row in eachrow(declining)
│             println("  $(row.Node) + $(row.Collocate): correlation=$(round(row.Correlation, digits=2))")
│         end
│     else
│         println("  No strongly declining associations found")
│     end
│ 
│     return declining
│ end
│ 
│ # Apply to our analysis
│ # declining = identify_declining_terms(temporal)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function compare_periods(temporal_analysis::TemporalCorpusAnalysis,
│                         period1::String, period2::String)
│     results1 = temporal_analysis.results_by_period[period1]
│     results2 = temporal_analysis.results_by_period[period2]
│ 
│     # Get all nodes
│     nodes = union(results1.nodes, results2.nodes)
│ 
│     comparison = DataFrame()
│ 
│     for node in nodes
│         if haskey(results1.results, node) && haskey(results2.results, node)
│             df1 = results1.results[node]
│             df2 = results2.results[node]
│ 
│             # Find common collocates
│             common = intersect(df1.Collocate, df2.Collocate)
│ 
│             for collocate in common
│                 idx1 = findfirst(==(collocate), df1.Collocate)
│                 idx2 = findfirst(==(collocate), df2.Collocate)
│ 
│                 if idx1 !== nothing && idx2 !== nothing
│                     # Assume first metric column after standard columns
│                     metric_col = names(df1)[findfirst(n -> n ∉ [:Node, :Collocate, :Frequency, :DocFrequency], names(df1))]
│ 
│                     score1 = df1[idx1, metric_col]
│                     score2 = df2[idx2, metric_col]
│ 
│                     push!(comparison, (
│                         Node = node,
│                         Collocate = collocate,
│                         Period1_Score = score1,
│                         Period2_Score = score2,
│                         Change = score2 - score1,
│                         PercentChange = (score2 - score1) / abs(score1) * 100
│                     ))
│                 end
│             end
│         end
│     end
│ 
│     return comparison
│ end
│ 
│ # Example comparison
│ if length(temporal.time_periods) >= 2
│     period1 = temporal.time_periods[1]
│     period2 = temporal.time_periods[end]
│     println("\nComparing $period1 vs $period2:")
│     # comparison = compare_periods(temporal, period1, period2)
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/advanced/temporal.md:126-181
│ ```@example cross_period
│ using TextAssociations
│ 
│ function compare_periods(temporal_analysis::TemporalCorpusAnalysis,
│                         period1::String, period2::String)
│     results1 = temporal_analysis.results_by_period[period1]
│     results2 = temporal_analysis.results_by_period[period2]
│ 
│     # Get all nodes
│     nodes = union(results1.nodes, results2.nodes)
│ 
│     comparison = DataFrame()
│ 
│     for node in nodes
│         if haskey(results1.results, node) && haskey(results2.results, node)
│             df1 = results1.results[node]
│             df2 = results2.results[node]
│ 
│             # Find common collocates
│             common = intersect(df1.Collocate, df2.Collocate)
│ 
│             for collocate in common
│                 idx1 = findfirst(==(collocate), df1.Collocate)
│                 idx2 = findfirst(==(collocate), df2.Collocate)
│ 
│                 if idx1 !== nothing && idx2 !== nothing
│                     # Assume first metric column after standard columns
│                     metric_col = names(df1)[findfirst(n -> n ∉ [:Node, :Collocate, :Frequency, :DocFrequency], names(df1))]
│ 
│                     score1 = df1[idx1, metric_col]
│                     score2 = df2[idx2, metric_col]
│ 
│                     push!(comparison, (
│                         Node = node,
│                         Collocate = collocate,
│                         Period1_Score = score1,
│                         Period2_Score = score2,
│                         Change = score2 - score1,
│                         PercentChange = (score2 - score1) / abs(score1) * 100
│                     ))
│                 end
│             end
│         end
│     end
│ 
│     return comparison
│ end
│ 
│ # Example comparison
│ if length(temporal.time_periods) >= 2
│     period1 = temporal.time_periods[1]
│     period2 = temporal.time_periods[end]
│     println("\nComparing $period1 vs $period2:")
│     # comparison = compare_periods(temporal, period1, period2)
│ end
│ ```
│   exception = (UndefVarError(:temporal, Main.__atexample__named__cross_period), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__cross_period at statement 2, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations, DataFrames
│ 
│ function prepare_timeseries_data(temporal_analysis::TemporalCorpusAnalysis,
│                                 node::String, collocate::Symbol)
│     periods = String[]
│     scores = Float64[]
│ 
│     for period in sort(temporal_analysis.time_periods)
│         if haskey(temporal_analysis.results_by_period, period)
│             results = temporal_analysis.results_by_period[period]
│ 
│             if haskey(results.results, node)
│                 df = results.results[node]
│                 idx = findfirst(==(collocate), df.Collocate)
│ 
│                 if idx !== nothing
│                     # Find metric column
│                     metric_cols = filter(n -> n ∉ [:Node, :Collocate, :Frequency, :DocFrequency], names(df))
│                     if !isempty(metric_cols)
│                         push!(periods, period)
│                         push!(scores, df[idx, metric_cols[1]])
│                     end
│                 end
│             end
│         end
│     end
│ 
│     return DataFrame(Period=periods, Score=scores)
│ end
│ 
│ # Prepare data for plotting
│ # timeseries = prepare_timeseries_data(temporal, "computing", :ai)
│ println("\nTime series data structure prepared for visualization")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations, Statistics
│ 
│ function detect_bursts(temporal_analysis::TemporalCorpusAnalysis,
│                       z_threshold::Float64=2.0)
│     bursts = DataFrame()
│ 
│     for (node, node_results) in temporal_analysis.results_by_period[1].results
│         # Track each collocate over time
│         collocate_scores = Dict{Symbol, Vector{Float64}}()
│ 
│         for period in temporal_analysis.time_periods
│             if haskey(temporal_analysis.results_by_period[period].results, node)
│                 period_df = temporal_analysis.results_by_period[period].results[node]
│ 
│                 for row in eachrow(period_df)
│                     if !haskey(collocate_scores, row.Collocate)
│                         collocate_scores[row.Collocate] = Float64[]
│                     end
│                     # Get first metric score
│                     metric_cols = filter(n -> n ∉ [:Node, :Collocate, :Frequency, :DocFrequency], names(period_df))
│                     if !isempty(metric_cols)
│                         push!(collocate_scores[row.Collocate], row[metric_cols[1]])
│                     end
│                 end
│             end
│         end
│ 
│         # Detect bursts using z-scores
│         for (collocate, scores) in collocate_scores
│             if length(scores) > 2
│                 μ = mean(scores)
│                 σ = std(scores)
│ 
│                 if σ > 0
│                     z_scores = (scores .- μ) ./ σ
│                     max_z = maximum(z_scores)
│ 
│                     if max_z > z_threshold
│                         burst_period = temporal_analysis.time_periods[argmax(z_scores)]
│                         push!(bursts, (
│                             Node = node,
│                             Collocate = collocate,
│                             BurstPeriod = burst_period,
│                             ZScore = max_z
│                         ))
│                     end
│                 end
│             end
│         end
│     end
│ 
│     if !isempty(bursts)
│         sort!(bursts, :ZScore, rev=true)
│         println("Detected Bursts (z > $z_threshold):")
│         for row in eachrow(first(bursts, min(5, nrow(bursts))))
│             println("  $(row.Node) + $(row.Collocate) in $(row.BurstPeriod): z=$(round(row.ZScore, digits=2))")
│         end
│     else
│         println("No significant bursts detected")
│     end
│ 
│     return bursts
│ end
│ 
│ # Detect bursts in our data
│ # bursts = detect_bursts(temporal)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function detect_semantic_shift(temporal_analysis::TemporalCorpusAnalysis,
│                               node::String, threshold::Float64=0.5)
│     periods = temporal_analysis.time_periods
│ 
│     if length(periods) < 2
│         println("Need at least 2 periods for semantic shift detection")
│         return DataFrame()
│     end
│ 
│     # Compare first and last periods
│     first_period = periods[1]
│     last_period = periods[end]
│ 
│     shifts = DataFrame()
│ 
│     if haskey(temporal_analysis.results_by_period[first_period].results, node) &&
│        haskey(temporal_analysis.results_by_period[last_period].results, node)
│ 
│         first_df = temporal_analysis.results_by_period[first_period].results[node]
│         last_df = temporal_analysis.results_by_period[last_period].results[node]
│ 
│         # Find collocates unique to each period
│         early_only = setdiff(first_df.Collocate, last_df.Collocate)
│         late_only = setdiff(last_df.Collocate, first_df.Collocate)
│ 
│         println("Semantic shift for '$node':")
│         println("  Lost associations ($(first_period)): ", first(early_only, 5))
│         println("  New associations ($(last_period)): ", first(late_only, 5))
│ 
│         # Calculate shift magnitude
│         all_collocates = union(first_df.Collocate, last_df.Collocate)
│         overlap = intersect(first_df.Collocate, last_df.Collocate)
│ 
│         jaccard = length(overlap) / length(all_collocates)
│         shift_magnitude = 1 - jaccard
│ 
│         println("  Semantic shift magnitude: $(round(shift_magnitude, digits=2))")
│     end
│ 
│     return shifts
│ end
│ 
│ # Analyze semantic shift
│ # detect_semantic_shift(temporal, "computing")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Running ExpanderPipeline on api/functions.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @meta block:
│ CurrentModule = TextAssociations
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:337
┌ Debug: Evaluating @docs block:
│ assoc_score
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = """
│ Data science combines mathematics, statistics, and computer science.
│ Machine learning is a crucial part of data science.
│ Data analysis helps extract insights from data.
│ """
│ 
│ # Create contingency table
│ ct = ContingencyTable(text, "data", windowsize=3, minfreq=1)
│ 
│ # Single metric evaluation
│ pmi_results = assoc_score(PMI, ct)
│ println("PMI Results:")
│ println(pmi_results)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ # Evaluate multiple metrics simultaneously
│ metrics = [PMI, LogDice, LLR, Dice]
│ multi_results = assoc_score(metrics, ct)
│ 
│ println("\nColumns in results: ", names(multi_results))
│ println("Top result by PMI:")
│ println(first(sort(multi_results, :PMI, rev=true), 1))
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:99-107
│ ```@example assoc_score_multi
│ # Evaluate multiple metrics simultaneously
│ metrics = [PMI, LogDice, LLR, Dice]
│ multi_results = assoc_score(metrics, ct)
│ 
│ println("\nColumns in results: ", names(multi_results))
│ println("Top result by PMI:")
│ println(first(sort(multi_results, :PMI, rev=true), 1))
│ ```
│   exception = (UndefVarError(:PMI, Main.__atexample__named__assoc_score_multi), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__assoc_score_multi at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ # Skip contingency table creation
│ results = assoc_score(PMI, text, "science", windowsize=4, minfreq=1)
│ println("\nDirect evaluation results:")
│ println(results)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:111-116
│ ```@example assoc_score_direct
│ # Skip contingency table creation
│ results = assoc_score(PMI, text, "science", windowsize=4, minfreq=1)
│ println("\nDirect evaluation results:")
│ println(results)
│ ```
│   exception = (UndefVarError(:assoc_score, Main.__atexample__named__assoc_score_direct), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__assoc_score_direct at statement 4, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ # Get only scores for better performance
│ scores = assoc_score(PMI, ct, scores_only=true)
│ println("\nScore vector: ", scores)
│ println("Length: ", length(scores))
│ 
│ # Multiple metrics with scores_only
│ score_dict = assoc_score([PMI, LogDice], ct, scores_only=true)
│ println("\nScore dictionary keys: ", keys(score_dict))
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:120-129
│ ```@example assoc_score_perf
│ # Get only scores for better performance
│ scores = assoc_score(PMI, ct, scores_only=true)
│ println("\nScore vector: ", scores)
│ println("Length: ", length(scores))
│ 
│ # Multiple metrics with scores_only
│ score_dict = assoc_score([PMI, LogDice], ct, scores_only=true)
│ println("\nScore dictionary keys: ", keys(score_dict))
│ ```
│   exception = (UndefVarError(:assoc_score, Main.__atexample__named__assoc_score_perf), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__assoc_score_perf at statement 4, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ # Evaluate and filter in one pipeline
│ function analyze_with_thresholds(text, word, thresholds)
│     ct = ContingencyTable(text, word, 5, 2)
│     results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│     # Apply multiple thresholds
│     filtered = filter(row ->
│         row.PMI >= thresholds[:pmi] &&
│         row.LogDice >= thresholds[:logdice] &&
│         row.LLR >= thresholds[:llr],
│         results
│     )
│ 
│     return sort(filtered, :PMI, rev=true)
│ end
│ 
│ thresholds = Dict(:pmi => 2.0, :logdice => 5.0, :llr => 3.84)
│ filtered = analyze_with_thresholds(text, "data", thresholds)
│ println("Filtered results: ", nrow(filtered), " collocates")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:135-155
│ ```@example assoc_score_advanced
│ # Evaluate and filter in one pipeline
│ function analyze_with_thresholds(text, word, thresholds)
│     ct = ContingencyTable(text, word, 5, 2)
│     results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│     # Apply multiple thresholds
│     filtered = filter(row ->
│         row.PMI >= thresholds[:pmi] &&
│         row.LogDice >= thresholds[:logdice] &&
│         row.LLR >= thresholds[:llr],
│         results
│     )
│ 
│     return sort(filtered, :PMI, rev=true)
│ end
│ 
│ thresholds = Dict(:pmi => 2.0, :logdice => 5.0, :llr => 3.84)
│ filtered = analyze_with_thresholds(text, "data", thresholds)
│ println("Filtered results: ", nrow(filtered), " collocates")
│ ```
│   exception = (UndefVarError(:text, Main.__atexample__named__assoc_score_advanced), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__assoc_score_advanced at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @docs block:
│ prep_string
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Default preprocessing
│ text = "Hello, WORLD!!! Multiple   spaces..."
│ doc = prep_string(text)
│ println("Default: '", text(doc), "'")
│ 
│ # Custom preprocessing
│ doc_custom = prep_string(text,
│     strip_case=false,        # Keep original case
│     strip_punctuation=false, # Keep punctuation
│     normalize_whitespace=true # Fix spacing only
│ )
│ println("Custom: '", text(doc_custom), "'")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:185-200
│ ```@example prep_string
│ using TextAssociations
│ 
│ # Default preprocessing
│ text = "Hello, WORLD!!! Multiple   spaces..."
│ doc = prep_string(text)
│ println("Default: '", text(doc), "'")
│ 
│ # Custom preprocessing
│ doc_custom = prep_string(text,
│     strip_case=false,        # Keep original case
│     strip_punctuation=false, # Keep punctuation
│     normalize_whitespace=true # Fix spacing only
│ )
│ println("Custom: '", text(doc_custom), "'")
│ ```
│   exception = (MethodError(TextAssociations.prep_string, ("Hello, WORLD!!! Multiple   spaces...",), 0x0000000000006a0d), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__prep_string at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ # Greek text with diacritics
│ greek = "Καλημέρα! Η ανάλυση κειμένου είναι σημαντική."
│ 
│ # Keep diacritics (default)
│ doc_with = prep_string(greek, strip_accents=false)
│ println("With accents: '", text(doc_with), "'")
│ 
│ # Remove diacritics
│ doc_without = prep_string(greek, strip_accents=true)
│ println("Without accents: '", text(doc_without), "'")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:204-215
│ ```@example prep_string_multi
│ # Greek text with diacritics
│ greek = "Καλημέρα! Η ανάλυση κειμένου είναι σημαντική."
│ 
│ # Keep diacritics (default)
│ doc_with = prep_string(greek, strip_accents=false)
│ println("With accents: '", text(doc_with), "'")
│ 
│ # Remove diacritics
│ doc_without = prep_string(greek, strip_accents=true)
│ println("Without accents: '", text(doc_without), "'")
│ ```
│   exception = (UndefVarError(:prep_string, Main.__atexample__named__prep_string_multi), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__prep_string_multi at statement 4, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ # From file
│ # doc = prep_string("document.txt")
│ 
│ # From directory (concatenates all .txt files)
│ # doc = prep_string("corpus/")
│ 
│ # Example with temporary file
│ using Mmap
│ temp_file = tempname() * ".txt"
│ write(temp_file, "Sample text from file.")
│ doc = prep_string(temp_file)
│ println("From file: '", text(doc), "'")
│ rm(temp_file)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:219-233
│ ```@example prep_string_files
│ # From file
│ # doc = prep_string("document.txt")
│ 
│ # From directory (concatenates all .txt files)
│ # doc = prep_string("corpus/")
│ 
│ # Example with temporary file
│ using Mmap
│ temp_file = tempname() * ".txt"
│ write(temp_file, "Sample text from file.")
│ doc = prep_string(temp_file)
│ println("From file: '", text(doc), "'")
│ rm(temp_file)
│ ```
│   exception = (UndefVarError(:prep_string, Main.__atexample__named__prep_string_files), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__prep_string_files at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @docs block:
│ build_vocab
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # From document
│ doc = prep_string("The quick brown fox jumps over the lazy dog")
│ vocab = build_vocab(doc)
│ 
│ println("Vocabulary size: ", length(vocab))
│ println("First 5 words:")
│ for (word, idx) in Iterators.take(vocab, 5)
│     println("  $idx: '$word'")
│ end
│ 
│ # From word vector
│ words = ["apple", "banana", "cherry", "apple"]  # Duplicates removed
│ vocab2 = build_vocab(words)
│ println("\nUnique words: ", length(vocab2))
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:253-270
│ ```@example vocab
│ using TextAssociations
│ 
│ # From document
│ doc = prep_string("The quick brown fox jumps over the lazy dog")
│ vocab = build_vocab(doc)
│ 
│ println("Vocabulary size: ", length(vocab))
│ println("First 5 words:")
│ for (word, idx) in Iterators.take(vocab, 5)
│     println("  $idx: '$word'")
│ end
│ 
│ # From word vector
│ words = ["apple", "banana", "cherry", "apple"]  # Duplicates removed
│ vocab2 = build_vocab(words)
│ println("\nUnique words: ", length(vocab2))
│ ```
│   exception = (MethodError(TextAssociations.prep_string, ("The quick brown fox jumps over the lazy dog",), 0x0000000000006a13), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__vocab at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @docs block:
│ available_metrics
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ metrics = available_metrics()
│ println("Total available metrics: ", length(metrics))
│ println("\nInformation-theoretic metrics:")
│ info_metrics = filter(m -> occursin("PMI", String(m)) || m == :PPMI, metrics)
│ println(info_metrics)
│ 
│ println("\nStatistical metrics:")
│ stat_metrics = filter(m -> m in [:LLR, :ChiSquare, :Tscore, :Zscore], metrics)
│ println(stat_metrics)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @docs block:
│ cached_data
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # ContingencyTable uses lazy evaluation internally
│ ct = ContingencyTable("sample text", "text", 3, 1)
│ 
│ # First access computes the table
│ println("First access...")
│ data1 = cached_data(ct.con_tbl)
│ 
│ # Second access uses cache (no computation)
│ println("Second access...")
│ data2 = cached_data(ct.con_tbl)
│ 
│ println("Same object? ", data1 === data2)  # true - same cached object
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:316-331
│ ```@example lazy
│ using TextAssociations
│ 
│ # ContingencyTable uses lazy evaluation internally
│ ct = ContingencyTable("sample text", "text", 3, 1)
│ 
│ # First access computes the table
│ println("First access...")
│ data1 = cached_data(ct.con_tbl)
│ 
│ # Second access uses cache (no computation)
│ println("Second access...")
│ data2 = cached_data(ct.con_tbl)
│ 
│ println("Same object? ", data1 === data2)  # true - same cached object
│ ```
│   exception = (MethodError(ContingencyTable, ("sample text", "text", 3, 1), 0x0000000000006a19), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__lazy at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @docs block:
│ document
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = """
│ Artificial intelligence and machine learning are transforming technology.
│ Deep learning, a subset of machine learning, uses neural networks.
│ Machine learning algorithms can learn from data without explicit programming.
│ """
│ 
│ # Analyze multiple words
│ nodes = ["learning", "machine", "neural", "data"]
│ results = Dict{String, DataFrame}()
│ 
│ for node in nodes
│     ct = ContingencyTable(text, node, windowsize=3, minfreq=1)
│     results[node] = assoc_score(PMI, ct)
│ end
│ 
│ println("Results per node:")
│ for (node, df) in results
│     println("  $node: $(nrow(df)) collocates, top PMI = $(maximum(df.PMI))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:353-375
│ ```@example batch
│ using TextAssociations
│ 
│ text = """
│ Artificial intelligence and machine learning are transforming technology.
│ Deep learning, a subset of machine learning, uses neural networks.
│ Machine learning algorithms can learn from data without explicit programming.
│ """
│ 
│ # Analyze multiple words
│ nodes = ["learning", "machine", "neural", "data"]
│ results = Dict{String, DataFrame}()
│ 
│ for node in nodes
│     ct = ContingencyTable(text, node, windowsize=3, minfreq=1)
│     results[node] = assoc_score(PMI, ct)
│ end
│ 
│ println("Results per node:")
│ for (node, df) in results
│     println("  $node: $(nrow(df)) collocates, top PMI = $(maximum(df.PMI))")
│ end
│ ```
│   exception = (UndefVarError(:DataFrame, Main.__atexample__named__batch), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__batch at statement 2, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ using DataFrames
│ 
│ # Compare different window sizes
│ function compare_parameters(text, word)
│     params = [
│         (window=2, minfreq=1),
│         (window=5, minfreq=1),
│         (window=10, minfreq=1)
│     ]
│ 
│     comparison = DataFrame()
│     for p in params
│         ct = ContingencyTable(text, word, p.window, p.minfreq)
│         df = assoc_score(PMI, ct)
│         df.WindowSize .= p.window
│         append!(comparison, df)
│     end
│ 
│     return comparison
│ end
│ 
│ comparison = compare_parameters(text, "learning")
│ grouped = groupby(comparison, :WindowSize)
│ summary = combine(grouped,
│     nrow => :NumCollocates,
│     :PMI => mean => :AvgPMI,
│     :PMI => maximum => :MaxPMI
│ )
│ println("\nWindow size comparison:")
│ println(summary)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:379-411
│ ```@example comparative
│ using TextAssociations
│ using DataFrames
│ 
│ # Compare different window sizes
│ function compare_parameters(text, word)
│     params = [
│         (window=2, minfreq=1),
│         (window=5, minfreq=1),
│         (window=10, minfreq=1)
│     ]
│ 
│     comparison = DataFrame()
│     for p in params
│         ct = ContingencyTable(text, word, p.window, p.minfreq)
│         df = assoc_score(PMI, ct)
│         df.WindowSize .= p.window
│         append!(comparison, df)
│     end
│ 
│     return comparison
│ end
│ 
│ comparison = compare_parameters(text, "learning")
│ grouped = groupby(comparison, :WindowSize)
│ summary = combine(grouped,
│     nrow => :NumCollocates,
│     :PMI => mean => :AvgPMI,
│     :PMI => maximum => :MaxPMI
│ )
│ println("\nWindow size comparison:")
│ println(summary)
│ ```
│   exception = (UndefVarError(:text, Main.__atexample__named__comparative), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__comparative at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Use scores_only for large-scale processing
│ function process_many_nodes(text, nodes)
│     scores = Dict{String, Vector{Float64}}()
│ 
│     for node in nodes
│         ct = ContingencyTable(text, node, 5, 1)
│         # Get only scores to save memory
│         scores[node] = assoc_score(PMI, ct, scores_only=true)
│     end
│ 
│     return scores
│ end
│ 
│ nodes = ["intelligence", "artificial", "learning"]
│ score_dict = process_many_nodes(text, nodes)
│ println("\nScore vectors per node:")
│ for (node, scores) in score_dict
│     println("  $node: $(length(scores)) scores, max = $(maximum(scores))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:417-439
│ ```@example memory
│ using TextAssociations
│ 
│ # Use scores_only for large-scale processing
│ function process_many_nodes(text, nodes)
│     scores = Dict{String, Vector{Float64}}()
│ 
│     for node in nodes
│         ct = ContingencyTable(text, node, 5, 1)
│         # Get only scores to save memory
│         scores[node] = assoc_score(PMI, ct, scores_only=true)
│     end
│ 
│     return scores
│ end
│ 
│ nodes = ["intelligence", "artificial", "learning"]
│ score_dict = process_many_nodes(text, nodes)
│ println("\nScore vectors per node:")
│ for (node, scores) in score_dict
│     println("  $node: $(length(scores)) scores, max = $(maximum(scores))")
│ end
│ ```
│   exception = (UndefVarError(:text, Main.__atexample__named__memory), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__memory at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Function for parallel processing (conceptual)
│ function parallel_evaluate(texts, word, metrics)
│     results = []
│ 
│     # In practice, use @distributed or Threads.@threads
│     for text in texts
│         ct = ContingencyTable(text, word, 5, 2)
│         push!(results, assoc_score(metrics, ct))
│     end
│ 
│     return results
│ end
│ 
│ # Example with multiple text segments
│ texts = [
│     "Machine learning is powerful.",
│     "Deep learning uses neural networks.",
│     "Artificial intelligence includes machine learning."
│ ]
│ 
│ results = parallel_evaluate(texts, "learning", [PMI, LogDice])
│ println("\nResults from $(length(results)) text segments processed")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:443-468
│ ```@example parallel
│ using TextAssociations
│ 
│ # Function for parallel processing (conceptual)
│ function parallel_evaluate(texts, word, metrics)
│     results = []
│ 
│     # In practice, use @distributed or Threads.@threads
│     for text in texts
│         ct = ContingencyTable(text, word, 5, 2)
│         push!(results, assoc_score(metrics, ct))
│     end
│ 
│     return results
│ end
│ 
│ # Example with multiple text segments
│ texts = [
│     "Machine learning is powerful.",
│     "Deep learning uses neural networks.",
│     "Artificial intelligence includes machine learning."
│ ]
│ 
│ results = parallel_evaluate(texts, "learning", [PMI, LogDice])
│ println("\nResults from $(length(results)) text segments processed")
│ ```
│   exception = (MethodError(ContingencyTable, ("Machine learning is powerful.", "learning", 5, 2), 0x0000000000006a24), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edbe74a, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__parallel at statement 5, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Handle empty or invalid inputs
│ function safe_evaluate(text, word, metric)
│     try
│         # Validate inputs
│         isempty(text) && throw(ArgumentError("Text cannot be empty"))
│         isempty(word) && throw(ArgumentError("Word cannot be empty"))
│ 
│         ct = ContingencyTable(text, word, 5, 1)
│         results = assoc_score(metric, ct)
│ 
│         if isempty(results)
│             println("Warning: No collocates found for '$word'")
│             return DataFrame()
│         end
│ 
│         return results
│     catch e
│         println("Error: ", e)
│         return DataFrame()
│     end
│ end
│ 
│ # Test with various inputs
│ println("Valid input:")
│ valid = safe_evaluate(text, "learning", PMI)
│ println("  Found $(nrow(valid)) collocates")
│ 
│ println("\nEmpty word:")
│ empty_word = safe_evaluate(text, "", PMI)
│ 
│ println("\nWord not in text:")
│ missing = safe_evaluate(text, "quantum", PMI)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:474-509
│ ```@example validation
│ using TextAssociations
│ 
│ # Handle empty or invalid inputs
│ function safe_evaluate(text, word, metric)
│     try
│         # Validate inputs
│         isempty(text) && throw(ArgumentError("Text cannot be empty"))
│         isempty(word) && throw(ArgumentError("Word cannot be empty"))
│ 
│         ct = ContingencyTable(text, word, 5, 1)
│         results = assoc_score(metric, ct)
│ 
│         if isempty(results)
│             println("Warning: No collocates found for '$word'")
│             return DataFrame()
│         end
│ 
│         return results
│     catch e
│         println("Error: ", e)
│         return DataFrame()
│     end
│ end
│ 
│ # Test with various inputs
│ println("Valid input:")
│ valid = safe_evaluate(text, "learning", PMI)
│ println("  Found $(nrow(valid)) collocates")
│ 
│ println("\nEmpty word:")
│ empty_word = safe_evaluate(text, "", PMI)
│ 
│ println("\nWord not in text:")
│ missing = safe_evaluate(text, "quantum", PMI)
│ ```
│   exception = (UndefVarError(:text, Main.__atexample__named__validation), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__validation at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ # Validate parameters before processing
│ function validated_analysis(text, word, windowsize, minfreq)
│     # Check window size
│     if windowsize < 1
│         throw(ArgumentError("Window size must be positive"))
│     elseif windowsize > 50
│         @warn "Large window size may include noise" windowsize
│     end
│ 
│     # Check minimum frequency
│     if minfreq < 1
│         throw(ArgumentError("Minimum frequency must be at least 1"))
│     elseif minfreq > 100
│         @warn "High minimum frequency may exclude valid collocates" minfreq
│     end
│ 
│     ct = ContingencyTable(text, word, windowsize, minfreq)
│     return assoc_score(PMI, ct)
│ end
│ 
│ # Test validation
│ try
│     validated_analysis(text, "learning", -1, 5)
│ catch e
│     println("Caught error: ", e)
│ end
│ 
│ results = validated_analysis(text, "learning", 3, 1)
│ println("Valid analysis: $(nrow(results)) results")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:513-543
│ ```@example param_validation
│ # Validate parameters before processing
│ function validated_analysis(text, word, windowsize, minfreq)
│     # Check window size
│     if windowsize < 1
│         throw(ArgumentError("Window size must be positive"))
│     elseif windowsize > 50
│         @warn "Large window size may include noise" windowsize
│     end
│ 
│     # Check minimum frequency
│     if minfreq < 1
│         throw(ArgumentError("Minimum frequency must be at least 1"))
│     elseif minfreq > 100
│         @warn "High minimum frequency may exclude valid collocates" minfreq
│     end
│ 
│     ct = ContingencyTable(text, word, windowsize, minfreq)
│     return assoc_score(PMI, ct)
│ end
│ 
│ # Test validation
│ try
│     validated_analysis(text, "learning", -1, 5)
│ catch e
│     println("Caught error: ", e)
│ end
│ 
│ results = validated_analysis(text, "learning", 3, 1)
│ println("Valid analysis: $(nrow(results)) results")
│ ```
│   exception = (UndefVarError(:text, Main.__atexample__named__param_validation), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__param_validation at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ using DataFrames
│ 
│ function comprehensive_analysis(text, target_word)
│     # Step 1: Preprocess
│     doc = prep_string(text,
│         strip_punctuation=true,
│         strip_case=true,
│         normalize_whitespace=true
│     )
│ 
│     # Step 2: Create contingency table
│     ct = ContingencyTable(text(doc), target_word, windowsize=5, minfreq=1)
│ 
│     # Step 3: Evaluate multiple metrics
│     metrics = [PMI, LogDice, LLR, Dice, JaccardIdx]
│     results = assoc_score(metrics, ct)
│ 
│     # Step 4: Add composite score
│     results.CompositeScore = (
│         results.PMI / maximum(results.PMI) * 0.3 +
│         results.LogDice / 14 * 0.3 +
│         results.LLR / maximum(results.LLR) * 0.2 +
│         results.Dice * 0.1 +
│         results.JaccardIdx * 0.1
│     )
│ 
│     # Step 5: Sort by composite score
│     sort!(results, :CompositeScore, rev=true)
│ 
│     return results
│ end
│ 
│ analysis = comprehensive_analysis(text, "learning")
│ println("\nTop 3 collocates by composite score:")
│ for row in eachrow(first(analysis, 3))
│     println("  $(row.Collocate): Score = $(round(row.CompositeScore, digits=3))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:549-588
│ ```@example pipeline
│ using TextAssociations
│ using DataFrames
│ 
│ function comprehensive_analysis(text, target_word)
│     # Step 1: Preprocess
│     doc = prep_string(text,
│         strip_punctuation=true,
│         strip_case=true,
│         normalize_whitespace=true
│     )
│ 
│     # Step 2: Create contingency table
│     ct = ContingencyTable(text(doc), target_word, windowsize=5, minfreq=1)
│ 
│     # Step 3: Evaluate multiple metrics
│     metrics = [PMI, LogDice, LLR, Dice, JaccardIdx]
│     results = assoc_score(metrics, ct)
│ 
│     # Step 4: Add composite score
│     results.CompositeScore = (
│         results.PMI / maximum(results.PMI) * 0.3 +
│         results.LogDice / 14 * 0.3 +
│         results.LLR / maximum(results.LLR) * 0.2 +
│         results.Dice * 0.1 +
│         results.JaccardIdx * 0.1
│     )
│ 
│     # Step 5: Sort by composite score
│     sort!(results, :CompositeScore, rev=true)
│ 
│     return results
│ end
│ 
│ analysis = comprehensive_analysis(text, "learning")
│ println("\nTop 3 collocates by composite score:")
│ for row in eachrow(first(analysis, 3))
│     println("  $(row.Collocate): Score = $(round(row.CompositeScore, digits=3))")
│ end
│ ```
│   exception = (UndefVarError(:text, Main.__atexample__named__pipeline), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__pipeline at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ using CSV
│ 
│ # Prepare results for export
│ ct = ContingencyTable(text, "intelligence", 5, 1)
│ results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│ # Add metadata
│ metadata!(results, "node", "intelligence", style=:note)
│ metadata!(results, "window_size", 5, style=:note)
│ metadata!(results, "min_freq", 1, style=:note)
│ metadata!(results, "timestamp", now(), style=:note)
│ 
│ # Export to CSV
│ output_file = tempname() * ".csv"
│ CSV.write(output_file, results)
│ println("Results exported to: ", output_file)
│ 
│ # Clean up
│ rm(output_file)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:592-613
│ ```@example export
│ using TextAssociations
│ using CSV
│ 
│ # Prepare results for export
│ ct = ContingencyTable(text, "intelligence", 5, 1)
│ results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│ # Add metadata
│ metadata!(results, "node", "intelligence", style=:note)
│ metadata!(results, "window_size", 5, style=:note)
│ metadata!(results, "min_freq", 1, style=:note)
│ metadata!(results, "timestamp", now(), style=:note)
│ 
│ # Export to CSV
│ output_file = tempname() * ".csv"
│ CSV.write(output_file, results)
│ println("Results exported to: ", output_file)
│ 
│ # Clean up
│ rm(output_file)
│ ```
│   exception = (ArgumentError("Package CSV not found in current path.\n- Run `import Pkg; Pkg.add(\"CSV\")` to install the CSV package."), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x000000011dc99232, Ptr{Nothing} @0x000000011dc99265, Ptr{Nothing} @0x0000000107d59b33, Ptr{Nothing} @0x000000011e017f57, Ptr{Nothing} @0x000000011d99c515, Ptr{Nothing} @0x0000000107d82fe1, Ptr{Nothing} @0x0000000107d82198, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ using Chain
│ using DataFrames
│ 
│ # Chain operations for cleaner code
│ result = @chain text begin
│     prep_string(strip_accents=false)
│     text
│     ContingencyTable("learning", 4, 1)
│     assoc_score([PMI, LogDice], _)
│     filter(row -> row.PMI > 2 && row.LogDice > 5, _)
│     sort(:PMI, rev=true)
│     first(5)
│ end
│ 
│ println("\nChained analysis result:")
│ println(result)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:619-637
│ ```@example chain
│ using TextAssociations
│ using Chain
│ using DataFrames
│ 
│ # Chain operations for cleaner code
│ result = @chain text begin
│     prep_string(strip_accents=false)
│     text
│     ContingencyTable("learning", 4, 1)
│     assoc_score([PMI, LogDice], _)
│     filter(row -> row.PMI > 2 && row.LogDice > 5, _)
│     sort(:PMI, rev=true)
│     first(5)
│ end
│ 
│ println("\nChained analysis result:")
│ println(result)
│ ```
│   exception = (ArgumentError("Package Chain not found in current path.\n- Run `import Pkg; Pkg.add(\"Chain\")` to install the Chain package."), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x000000011dc99232, Ptr{Nothing} @0x000000011dc99265, Ptr{Nothing} @0x0000000107d59b33, Ptr{Nothing} @0x000000011e017f57, Ptr{Nothing} @0x000000011d99c515, Ptr{Nothing} @0x0000000107d82fe1, Ptr{Nothing} @0x0000000107d82198, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ # Compose functions for reusable pipelines
│ preprocess = text -> prep_string(text, strip_case=true, strip_punctuation=true)
│ analyze = (text, word) -> ContingencyTable(text, word, 5, 2)
│ evaluate = ct -> assoc_score([PMI, LogDice, LLR], ct)
│ filter_strong = df -> filter(row -> row.PMI > 3 && row.LLR > 10.83, df)
│ 
│ # Use composition
│ pipeline = text -> begin
│     doc = preprocess(text)
│     ct = analyze(text(doc), "machine")
│     results = evaluate(ct)
│     filter_strong(results)
│ end
│ 
│ final_results = pipeline(text)
│ println("\nPipeline results: $(nrow(final_results)) strong collocates")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:641-658
│ ```@example compose
│ # Compose functions for reusable pipelines
│ preprocess = text -> prep_string(text, strip_case=true, strip_punctuation=true)
│ analyze = (text, word) -> ContingencyTable(text, word, 5, 2)
│ evaluate = ct -> assoc_score([PMI, LogDice, LLR], ct)
│ filter_strong = df -> filter(row -> row.PMI > 3 && row.LLR > 10.83, df)
│ 
│ # Use composition
│ pipeline = text -> begin
│     doc = preprocess(text)
│     ct = analyze(text(doc), "machine")
│     results = evaluate(ct)
│     filter_strong(results)
│ end
│ 
│ final_results = pipeline(text)
│ println("\nPipeline results: $(nrow(final_results)) strong collocates")
│ ```
│   exception = (UndefVarError(:text, Main.__atexample__named__compose), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__compose at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ function debug_analysis(text, word, windowsize, minfreq)
│     println("Debug Analysis for '$word'")
│     println("="^40)
│ 
│     # Check preprocessing
│     doc = prep_string(text)
│     tokens = TextAnalysis.tokens(doc)
│     println("Total tokens: ", length(tokens))
│     println("Unique tokens: ", length(unique(tokens)))
│     println("Word frequency: ", count(==(lowercase(word)), tokens))
│ 
│     # Check contingency table
│     ct = ContingencyTable(text(doc), word, windowsize, minfreq)
│     data = cached_data(ct.con_tbl)
│     println("Contingency table rows: ", nrow(data))
│ 
│     if !isempty(data)
│         println("Frequency range: ", minimum(data.a), " - ", maximum(data.a))
│     end
│ 
│     # Check results
│     results = assoc_score(PMI, ct)
│     println("Final results: ", nrow(results), " collocates")
│ 
│     return results
│ end
│ 
│ debug_results = debug_analysis(text, "learning", 3, 1)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/functions.md:725-754
│ ```@example debug
│ function debug_analysis(text, word, windowsize, minfreq)
│     println("Debug Analysis for '$word'")
│     println("="^40)
│ 
│     # Check preprocessing
│     doc = prep_string(text)
│     tokens = TextAnalysis.tokens(doc)
│     println("Total tokens: ", length(tokens))
│     println("Unique tokens: ", length(unique(tokens)))
│     println("Word frequency: ", count(==(lowercase(word)), tokens))
│ 
│     # Check contingency table
│     ct = ContingencyTable(text(doc), word, windowsize, minfreq)
│     data = cached_data(ct.con_tbl)
│     println("Contingency table rows: ", nrow(data))
│ 
│     if !isempty(data)
│         println("Frequency range: ", minimum(data.a), " - ", maximum(data.a))
│     end
│ 
│     # Check results
│     results = assoc_score(PMI, ct)
│     println("Final results: ", nrow(results), " collocates")
│ 
│     return results
│ end
│ 
│ debug_results = debug_analysis(text, "learning", 3, 1)
│ ```
│   exception = (UndefVarError(:text, Main.__atexample__named__debug), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__debug at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Running ExpanderPipeline on api/types.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @meta block:
│ CurrentModule = TextAssociations
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:337
┌ Debug: Evaluating @docs block:
│ ContingencyTable
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = """
│ The field of data science combines statistical analysis with machine learning.
│ Data scientists use various tools for data visualization and data mining.
│ Modern data science relies heavily on big data technologies.
│ """
│ 
│ # Create contingency table for "data" (use positional args)
│ ct = ContingencyTable(text, "data", 3, 1)
│ 
│ # The table is computed lazily when first accessed
│ results = assoc_score(PMI, ct)
│ println("Found $(nrow(results)) collocates for 'data'")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/types.md:77-92
│ ```@example ct
│ using TextAssociations
│ 
│ text = """
│ The field of data science combines statistical analysis with machine learning.
│ Data scientists use various tools for data visualization and data mining.
│ Modern data science relies heavily on big data technologies.
│ """
│ 
│ # Create contingency table for "data" (use positional args)
│ ct = ContingencyTable(text, "data", 3, 1)
│ 
│ # The table is computed lazily when first accessed
│ results = assoc_score(PMI, ct)
│ println("Found $(nrow(results)) collocates for 'data'")
│ ```
│   exception = (MethodError(ContingencyTable, ("The field of data science combines statistical analysis with machine learning.\nData scientists use various tools for data visualization and data mining.\nModern data science relies heavily on big data technologies.\n", "data", 3, 1), 0x0000000000006a3e), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__ct at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @docs block:
│ Corpus
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ using TextAnalysis: StringDocument  # avoid bringing TextAnalysis.Corpus into scope
│ 
│ # Create corpus from documents
│ docs = [
│     StringDocument("Artificial intelligence is transforming technology."),
│     StringDocument("Machine learning is a subset of artificial intelligence."),
│     StringDocument("Deep learning uses neural networks.")
│ ]
│ 
│ corpus = TextAssociations.Corpus(docs, metadata=Dict("source" => "AI texts"))
│ 
│ println("Corpus Statistics:")
│ println("  Documents: ", length(corpus.documents))
│ println("  Vocabulary size: ", length(corpus.vocabulary))
│ println("  Metadata: ", collect(keys(corpus.metadata)))
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/api/types.md:133-150
│ ```@example corpus
│ using TextAssociations
│ using TextAnalysis: StringDocument  # avoid bringing TextAnalysis.Corpus into scope
│ 
│ # Create corpus from documents
│ docs = [
│     StringDocument("Artificial intelligence is transforming technology."),
│     StringDocument("Machine learning is a subset of artificial intelligence."),
│     StringDocument("Deep learning uses neural networks.")
│ ]
│ 
│ corpus = TextAssociations.Corpus(docs, metadata=Dict("source" => "AI texts"))
│ 
│ println("Corpus Statistics:")
│ println("  Documents: ", length(corpus.documents))
│ println("  Vocabulary size: ", length(corpus.vocabulary))
│ println("  Metadata: ", collect(keys(corpus.metadata)))
│ ```
│   exception = (TypeError(Symbol("keyword argument"), :metadata, Dict{String, Any}, Dict("source" => "AI texts")), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x000000019ed2e2cf, Ptr{Nothing} @0x000000019ed2e2fd, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__corpus at statement 11, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @docs block:
│ CorpusContingencyTable
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @docs block:
│ MultiNodeAnalysis
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @docs block:
│ TemporalCorpusAnalysis
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @docs block:
│ SubcorpusComparison
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @docs block:
│ CollocationNetwork
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @docs block:
│ Concordance
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @docs block:
│ AssociationMetric
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @docs block:
│ AssociationDataFormat
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @docs block:
│ LazyProcess
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ using DataFrames
│ 
│ # Return a DataFrame so it matches LazyProcess{..., DataFrame}
│ expensive_df() = DataFrame(x = 1:3, y = [10, 20, 30])
│ 
│ lp = LazyProcess(expensive_df)   # default R = DataFrame
│ 
│ # First call computes the result
│ result1 = cached_data(lp)
│ 
│ # Second call uses cache
│ result2 = cached_data(lp)
│ 
│ println("Results equal: ", result1 == result2)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @docs block:
│ LazyInput
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:420
┌ Debug: Running ExpanderPipeline on contributing.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Example code
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Running ExpanderPipeline on getting_started/examples.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @example block:
│ using TextAssociations, DataFrames
│ 
│ # Sample academic abstracts
│ abstracts = """
│ Machine learning algorithms have revolutionized data analysis by enabling
│ automated pattern recognition. Deep learning, a subset of machine learning,
│ uses neural networks to process complex data structures.
│ 
│ Recent advances in artificial intelligence have led to breakthroughs in
│ natural language processing. Transformer models have become the foundation
│ for modern language understanding systems.
│ 
│ Computer vision applications leverage convolutional neural networks to
│ extract features from images. Object detection and image segmentation
│ are key tasks in computer vision research.
│ """
│ 
│ # Find technical terminology
│ ct = ContingencyTable(abstracts, "learning", windowsize=5, minfreq=2;
│     norm_config=TextNorm(strip_case=true, strip_punctuation=true))
│ 
│ # Calculate multiple metrics for validation
│ results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│ # Filter for domain-specific terms (high scores across metrics)
│ technical_terms = filter(row ->
│     row.PMI > 3.0 &&
│     row.LogDice > 7.0 &&
│     row.LLR > 10.83,  # p < 0.001
│     results
│ )
│ 
│ println("Domain-specific collocates of 'learning':")
│ for row in eachrow(sort(technical_terms, :PMI, rev=true))
│     println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ tweets = """
│ Breaking news: breakthrough in quantum computing announced today!
│ Quantum computing will transform cryptography and security.
│ Major tech companies investing billions in quantum research.
│ Scientists achieve quantum supremacy with new processor design.
│ Quantum algorithms solve problems classical computers cannot handle.
│ """
│ 
│ # Analyze with larger window for social media
│ ct = ContingencyTable(tweets, "quantum", windowsize=7, minfreq=1)
│ 
│ # Use LogDice for stable results across different sample sizes
│ results = assoc_score(LogDice, ct)
│ 
│ println("Trending with 'quantum' (LogDice scores):")
│ for row in eachrow(first(sort(results, :LogDice, rev=true), 5))
│     println("  $(row.Collocate): $(round(row.LogDice, digits=2))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations, DataFrames
│ 
│ # Two different text genres
│ technical = """
│ The algorithm optimizes performance through parallel processing.
│ System architecture supports distributed computing paradigms.
│ Database queries are optimized using indexing strategies.
│ """
│ 
│ narrative = """
│ The story unfolds through multiple perspectives and timelines.
│ Character development drives the narrative forward compellingly.
│ Plot twists keep readers engaged throughout the journey.
│ """
│ 
│ # Analyze same word in different contexts
│ function compare_genres(word::String)
│     # Technical context
│     ct_tech = ContingencyTable(technical, word, 3, 1)
│     tech_results = assoc_score(PMI, ct_tech; scores_only=false)
│     tech_results[!, :Genre] .= "Technical"
│ 
│     # Narrative context
│     ct_narr = ContingencyTable(narrative, word, 3, 1)
│     narr_results = assoc_score(PMI, ct_narr; scores_only=false)
│     narr_results[!, :Genre] .= "Narrative"
│ 
│     # Combine results
│     combined = vcat(tech_results, narr_results, cols=:union)
│     return combined
│ end
│ 
│ # Compare "the" in both genres
│ comparison = compare_genres("the")
│ grouped = groupby(comparison, :Genre)
│ 
│ println("Word associations by genre:")
│ for group in grouped
│     genre = first(group.Genre)
│     println("\n$genre context:")
│     for row in eachrow(first(sort(group, :PMI, rev=true), 3))
│         println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│     end
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/examples.md:85-130
│ ```@example comparative
│ using TextAssociations, DataFrames
│ 
│ # Two different text genres
│ technical = """
│ The algorithm optimizes performance through parallel processing.
│ System architecture supports distributed computing paradigms.
│ Database queries are optimized using indexing strategies.
│ """
│ 
│ narrative = """
│ The story unfolds through multiple perspectives and timelines.
│ Character development drives the narrative forward compellingly.
│ Plot twists keep readers engaged throughout the journey.
│ """
│ 
│ # Analyze same word in different contexts
│ function compare_genres(word::String)
│     # Technical context
│     ct_tech = ContingencyTable(technical, word, 3, 1)
│     tech_results = assoc_score(PMI, ct_tech; scores_only=false)
│     tech_results[!, :Genre] .= "Technical"
│ 
│     # Narrative context
│     ct_narr = ContingencyTable(narrative, word, 3, 1)
│     narr_results = assoc_score(PMI, ct_narr; scores_only=false)
│     narr_results[!, :Genre] .= "Narrative"
│ 
│     # Combine results
│     combined = vcat(tech_results, narr_results, cols=:union)
│     return combined
│ end
│ 
│ # Compare "the" in both genres
│ comparison = compare_genres("the")
│ grouped = groupby(comparison, :Genre)
│ 
│ println("Word associations by genre:")
│ for group in grouped
│     genre = first(group.Genre)
│     println("\n$genre context:")
│     for row in eachrow(first(sort(group, :PMI, rev=true), 3))
│         println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│     end
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("The algorithm optimizes performance through parallel processing.\nSystem architecture supports distributed computing paradigms.\nDatabase queries are optimized using indexing strategies.\n", "the", 3, 1), 0x0000000000006a4d), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edc207e, Ptr{Nothing} @0x000000019edc20b9, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__comparative at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = """
│ The project was completed on time and under budget.
│ We need to think outside the box for this solution.
│ Let's touch base next week to discuss progress.
│ The new approach is a game changer for our industry.
│ It's important to keep an eye on market trends.
│ The results speak for themselves in this case.
│ """
│ 
│ # Identify components of multi-word expressions
│ function find_expressions(text::String)
│     # Common function words that start expressions
│     starters = ["on", "outside", "touch", "game", "keep", "speak"]
│ 
│     expressions = DataFrame()
│ 
│     for starter in starters
│         ct = ContingencyTable(text, starter, windowsize=2, minfreq=1)
│         results = assoc_score([PMI, Dice], ct)
│ 
│         # High PMI + High Dice = likely fixed expression
│         fixed = filter(row -> row.PMI > 2.0 && row.Dice > 0.3, results)
│ 
│         if nrow(fixed) > 0
│             fixed[!, :Starter] .= starter
│             expressions = vcat(expressions, fixed, cols=:union)
│         end
│     end
│ 
│     return expressions
│ end
│ 
│ expressions = find_expressions(text)
│ println("Potential multi-word expressions:")
│ for row in eachrow(expressions)
│     println("  $(row.Starter) + $(row.Collocate)")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/examples.md:136-176
│ ```@example multiword
│ using TextAssociations
│ 
│ text = """
│ The project was completed on time and under budget.
│ We need to think outside the box for this solution.
│ Let's touch base next week to discuss progress.
│ The new approach is a game changer for our industry.
│ It's important to keep an eye on market trends.
│ The results speak for themselves in this case.
│ """
│ 
│ # Identify components of multi-word expressions
│ function find_expressions(text::String)
│     # Common function words that start expressions
│     starters = ["on", "outside", "touch", "game", "keep", "speak"]
│ 
│     expressions = DataFrame()
│ 
│     for starter in starters
│         ct = ContingencyTable(text, starter, windowsize=2, minfreq=1)
│         results = assoc_score([PMI, Dice], ct)
│ 
│         # High PMI + High Dice = likely fixed expression
│         fixed = filter(row -> row.PMI > 2.0 && row.Dice > 0.3, results)
│ 
│         if nrow(fixed) > 0
│             fixed[!, :Starter] .= starter
│             expressions = vcat(expressions, fixed, cols=:union)
│         end
│     end
│ 
│     return expressions
│ end
│ 
│ expressions = find_expressions(text)
│ println("Potential multi-word expressions:")
│ for row in eachrow(expressions)
│     println("  $(row.Starter) + $(row.Collocate)")
│ end
│ ```
│   exception = (UndefVarError(:DataFrame, Main.__atexample__named__multiword), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d644b3, Ptr{Nothing} @0x000000019edc2337, Ptr{Nothing} @0x000000019edc31d9, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__multiword at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations, DataFrames
│ 
│ # Documents with temporal progression
│ early_docs = """
│ Early computers used vacuum tubes for processing.
│ Punch cards were the primary input method.
│ Memory was measured in kilobytes.
│ """
│ 
│ modern_docs = """
│ Modern computers use multi-core processors.
│ Cloud computing provides unlimited storage.
│ Memory is measured in terabytes.
│ """
│ 
│ function temporal_comparison(word::String)
│     # Early period
│     ct_early = ContingencyTable(early_docs, word, 4, 1)
│     early = assoc_score(PMI, ct_early)
│     early[!, :Period] .= "Early"
│ 
│     # Modern period
│     ct_modern = ContingencyTable(modern_docs, word, 4, 1)
│     modern = assoc_score(PMI, ct_modern)
│     modern[!, :Period] .= "Modern"
│ 
│     return vcat(early, modern, cols=:union)
│ end
│ 
│ temporal = temporal_comparison("computers")
│ println("\nEvolution of 'computers' associations:")
│ for period in ["Early", "Modern"]
│     period_data = filter(row -> row.Period == period, temporal)
│     if nrow(period_data) > 0
│         println("\n$period period:")
│         for row in eachrow(first(sort(period_data, :PMI, rev=true), 2))
│             println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│         end
│     end
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/examples.md:182-223
│ ```@example temporal
│ using TextAssociations, DataFrames
│ 
│ # Documents with temporal progression
│ early_docs = """
│ Early computers used vacuum tubes for processing.
│ Punch cards were the primary input method.
│ Memory was measured in kilobytes.
│ """
│ 
│ modern_docs = """
│ Modern computers use multi-core processors.
│ Cloud computing provides unlimited storage.
│ Memory is measured in terabytes.
│ """
│ 
│ function temporal_comparison(word::String)
│     # Early period
│     ct_early = ContingencyTable(early_docs, word, 4, 1)
│     early = assoc_score(PMI, ct_early)
│     early[!, :Period] .= "Early"
│ 
│     # Modern period
│     ct_modern = ContingencyTable(modern_docs, word, 4, 1)
│     modern = assoc_score(PMI, ct_modern)
│     modern[!, :Period] .= "Modern"
│ 
│     return vcat(early, modern, cols=:union)
│ end
│ 
│ temporal = temporal_comparison("computers")
│ println("\nEvolution of 'computers' associations:")
│ for period in ["Early", "Modern"]
│     period_data = filter(row -> row.Period == period, temporal)
│     if nrow(period_data) > 0
│         println("\n$period period:")
│         for row in eachrow(first(sort(period_data, :PMI, rev=true), 2))
│             println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│         end
│     end
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("Early computers used vacuum tubes for processing.\nPunch cards were the primary input method.\nMemory was measured in kilobytes.\n", "computers", 4, 1), 0x0000000000006a54), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edc34ee, Ptr{Nothing} @0x000000019edc3529, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__temporal at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Greek text example
│ greek_text = """
│ Η τεχνητή νοημοσύνη αλλάζει τον κόσμο.
│ Η μηχανική μάθηση είναι μέρος της τεχνητής νοημοσύνης.
│ Τα νευρωνικά δίκτυα είναι ισχυρά εργαλεία.
│ """
│ 
│ # Configure for Greek
│ greek_config = TextNorm(
│     strip_case=true,
│     strip_accents=true,  # Remove tonos marks
│     unicode_form=:NFD,
│     strip_punctuation=true
│ )
│ 
│ # Analyze Greek text
│ ct = ContingencyTable(greek_text, "τεχνητής", 3, 1;
│     norm_config=greek_config)
│ 
│ results = assoc_score(PMI, ct)
│ println("Greek text collocations:")
│ for row in eachrow(results)
│     println("  $(row.Node) + $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/examples.md:227-254
│ ```@example crossling
│ using TextAssociations
│ 
│ # Greek text example
│ greek_text = """
│ Η τεχνητή νοημοσύνη αλλάζει τον κόσμο.
│ Η μηχανική μάθηση είναι μέρος της τεχνητής νοημοσύνης.
│ Τα νευρωνικά δίκτυα είναι ισχυρά εργαλεία.
│ """
│ 
│ # Configure for Greek
│ greek_config = TextNorm(
│     strip_case=true,
│     strip_accents=true,  # Remove tonos marks
│     unicode_form=:NFD,
│     strip_punctuation=true
│ )
│ 
│ # Analyze Greek text
│ ct = ContingencyTable(greek_text, "τεχνητής", 3, 1;
│     norm_config=greek_config)
│ 
│ results = assoc_score(PMI, ct)
│ println("Greek text collocations:")
│ for row in eachrow(results)
│     println("  $(row.Node) + $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│ end
│ ```
│   exception = (MethodError(Core.kwcall, ((norm_config = TextNorm(true, true, :NFD, true, true, true, false, false),), ContingencyTable, "Η τεχνητή νοημοσύνη αλλάζει τον κόσμο.\nΗ μηχανική μάθηση είναι μέρος της τεχνητής νοημοσύνης.\nΤα νευρωνικά δίκτυα είναι ισχυρά εργαλεία.\n", "τεχνητής", 3, 1), 0x0000000000006a56), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__crossling at statement 5, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations, DataFrames
│ 
│ function build_collocation_dict(text::String, min_pmi::Float64=3.0)
│     # Key words to analyze
│     keywords = ["data", "analysis", "model", "system", "process"]
│ 
│     dict = DataFrame()
│ 
│     for keyword in keywords
│         # Skip if word not in text
│         if !occursin(lowercase(keyword), lowercase(text))
│             continue
│         end
│ 
│         ct = ContingencyTable(text, keyword, 5, 2)
│         results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│         # Strong collocations only
│         strong = filter(row -> row.PMI >= min_pmi, results)
│ 
│         if nrow(strong) > 0
│             dict = vcat(dict, strong, cols=:union)
│         end
│     end
│ 
│     # Sort by node then PMI
│     sort!(dict, [:Node, order(:PMI, rev=true)])
│ 
│     return dict
│ end
│ 
│ sample_text = """
│ Data analysis requires careful data preparation and data validation.
│ Statistical models help analyze complex data patterns.
│ System design influences system performance and system reliability.
│ Process optimization improves process efficiency significantly.
│ Model validation ensures model accuracy and model robustness.
│ """
│ 
│ dictionary = build_collocation_dict(sample_text, 2.0)
│ println("\nCollocation Dictionary:")
│ current_node = ""
│ for row in eachrow(dictionary)
│     if row.Node != current_node
│         current_node = row.Node
│         println("\n$current_node:")
│     end
│     println("  → $(row.Collocate) (PMI: $(round(row.PMI, digits=2)))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/examples.md:260-310
│ ```@example dictionary
│ using TextAssociations, DataFrames
│ 
│ function build_collocation_dict(text::String, min_pmi::Float64=3.0)
│     # Key words to analyze
│     keywords = ["data", "analysis", "model", "system", "process"]
│ 
│     dict = DataFrame()
│ 
│     for keyword in keywords
│         # Skip if word not in text
│         if !occursin(lowercase(keyword), lowercase(text))
│             continue
│         end
│ 
│         ct = ContingencyTable(text, keyword, 5, 2)
│         results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│         # Strong collocations only
│         strong = filter(row -> row.PMI >= min_pmi, results)
│ 
│         if nrow(strong) > 0
│             dict = vcat(dict, strong, cols=:union)
│         end
│     end
│ 
│     # Sort by node then PMI
│     sort!(dict, [:Node, order(:PMI, rev=true)])
│ 
│     return dict
│ end
│ 
│ sample_text = """
│ Data analysis requires careful data preparation and data validation.
│ Statistical models help analyze complex data patterns.
│ System design influences system performance and system reliability.
│ Process optimization improves process efficiency significantly.
│ Model validation ensures model accuracy and model robustness.
│ """
│ 
│ dictionary = build_collocation_dict(sample_text, 2.0)
│ println("\nCollocation Dictionary:")
│ current_node = ""
│ for row in eachrow(dictionary)
│     if row.Node != current_node
│         current_node = row.Node
│         println("\n$current_node:")
│     end
│     println("  → $(row.Collocate) (PMI: $(round(row.PMI, digits=2)))")
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("Data analysis requires careful data preparation and data validation.\nStatistical models help analyze complex data patterns.\nSystem design influences system performance and system reliability.\nProcess optimization improves process efficiency significantly.\nModel validation ensures model accuracy and model robustness.\n", "data", 5, 2), 0x0000000000006a5b), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edc4e98, Ptr{Nothing} @0x000000019edc4fe1, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__dictionary at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ using BenchmarkTools
│ 
│ text = repeat("The quick brown fox jumps over the lazy dog. ", 100)
│ 
│ # Benchmark different configurations
│ function benchmark_configs()
│     configs = [
│         (window=3, minfreq=1, desc="Small window, low threshold"),
│         (window=5, minfreq=5, desc="Medium window, medium threshold"),
│         (window=10, minfreq=10, desc="Large window, high threshold")
│     ]
│ 
│     println("Configuration benchmarks:")
│     for config in configs
│         time = @elapsed begin
│             ct = ContingencyTable(text, "the", config.window, config.minfreq)
│             results = assoc_score(PMI, ct; scores_only=true)
│         end
│ 
│         println("  $(config.desc):")
│         println("    Time: $(round(time*1000, digits=2))ms")
│     end
│ end
│ 
│ # Benchmark metrics
│ function benchmark_metrics()
│     ct = ContingencyTable(text, "quick", 5, 1)
│ 
│     metrics = [PMI, LogDice, LLR, Dice]
│     println("\nMetric benchmarks:")
│ 
│     for metric in metrics
│         time = @elapsed assoc_score(metric, ct; scores_only=true)
│         println("  $metric: $(round(time*1000, digits=3))ms")
│     end
│ end
│ 
│ benchmark_configs()
│ benchmark_metrics()
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/examples.md:316-357
│ ```@example benchmark
│ using TextAssociations
│ using BenchmarkTools
│ 
│ text = repeat("The quick brown fox jumps over the lazy dog. ", 100)
│ 
│ # Benchmark different configurations
│ function benchmark_configs()
│     configs = [
│         (window=3, minfreq=1, desc="Small window, low threshold"),
│         (window=5, minfreq=5, desc="Medium window, medium threshold"),
│         (window=10, minfreq=10, desc="Large window, high threshold")
│     ]
│ 
│     println("Configuration benchmarks:")
│     for config in configs
│         time = @elapsed begin
│             ct = ContingencyTable(text, "the", config.window, config.minfreq)
│             results = assoc_score(PMI, ct; scores_only=true)
│         end
│ 
│         println("  $(config.desc):")
│         println("    Time: $(round(time*1000, digits=2))ms")
│     end
│ end
│ 
│ # Benchmark metrics
│ function benchmark_metrics()
│     ct = ContingencyTable(text, "quick", 5, 1)
│ 
│     metrics = [PMI, LogDice, LLR, Dice]
│     println("\nMetric benchmarks:")
│ 
│     for metric in metrics
│         time = @elapsed assoc_score(metric, ct; scores_only=true)
│         println("  $metric: $(round(time*1000, digits=3))ms")
│     end
│ end
│ 
│ benchmark_configs()
│ benchmark_metrics()
│ ```
│   exception = (MethodError(ContingencyTable, ("The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. ", "the", 3, 1), 0x0000000000006a5f), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edc529f, Ptr{Nothing} @0x000000019edc52d1, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__benchmark at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Running ExpanderPipeline on getting_started/installation.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @meta block:
│ CurrentModule = TextAssociations
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:337
┌ Debug: Running ExpanderPipeline on getting_started/tutorial.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @meta block:
│ CurrentModule = TextAssociations
│ DocTestSetup = quote
│     using TextAssociations
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:337
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Sample text (you can also load from a file)
│ text = """
│ Data science is an interdisciplinary field that uses scientific methods,
│ processes, algorithms and systems to extract knowledge from data.
│ Machine learning is a key component of data science.
│ Data scientists use various tools for data analysis and data visualization.
│ """
│ 
│ # Create a contingency table for the word "data"
│ ct = ContingencyTable(
│     text,           # Input text
│     "data",         # Node word (target)
│     windowsize=3,   # Look 3 words left/right
│     minfreq=1       # Minimum frequency
│ )
│ 
│ # Calculate PMI (Pointwise Mutual Information)
│ results = assoc_score(PMI, ct)
│ println(results)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ # Sort by PMI score
│ using DataFrames
│ sorted_results = sort(results, :PMI, rev=true)
│ println("Top collocations by PMI:")
│ for row in eachrow(first(sorted_results, 5))
│     println("  $(row.Collocate): PMI = $(round(row.PMI, digits=2))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ # Evaluate multiple metrics at once
│ metrics = [PMI, LogDice, LLR, Dice]
│ multi_results = assoc_score(metrics, ct)
│ 
│ # View the first few rows
│ println("Multiple metrics comparison:")
│ println(first(multi_results, 5))
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ # Create a small corpus for demonstration
│ docs = [
│     "Machine learning algorithms learn from data patterns.",
│     "Deep learning is a subset of machine learning.",
│     "Data science combines statistics and machine learning.",
│     "Neural networks power deep learning systems.",
│     "Big data requires efficient processing algorithms."
│ ]
│ 
│ # Save as files (in practice, you'd have existing files)
│ temp_dir = mktempdir()
│ for (i, doc) in enumerate(docs)
│     write(joinpath(temp_dir, "doc$i.txt"), doc)
│ end
│ 
│ # Load corpus from directory
│ corpus = read_corpus(temp_dir, preprocess=true, min_doc_length=5)
│ 
│ println("Corpus loaded:")
│ println("  Documents: ", length(corpus.documents))
│ println("  Vocabulary size: ", length(corpus.vocabulary))
│ 
│ # Clean up temp directory
│ rm(temp_dir, recursive=true)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ # Create a simple corpus directly
│ using TextAnalysis
│ doc_objects = [StringDocument(d) for d in docs]
│ corpus = Corpus(doc_objects)
│ 
│ # Analyze "learning" across the corpus
│ results = analyze_node(
│     corpus,
│     "learning",     # Node word
│     PMI,           # Metric
│     windowsize=3,   # Context window
│     minfreq=2      # Min frequency across corpus
│ )
│ 
│ println("Top collocates of 'learning' in corpus:")
│ println(first(results, 5))
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/tutorial.md:117-134
│ ```@example tutorial
│ # Create a simple corpus directly
│ using TextAnalysis
│ doc_objects = [StringDocument(d) for d in docs]
│ corpus = Corpus(doc_objects)
│ 
│ # Analyze "learning" across the corpus
│ results = analyze_node(
│     corpus,
│     "learning",     # Node word
│     PMI,           # Metric
│     windowsize=3,   # Context window
│     minfreq=2      # Min frequency across corpus
│ )
│ 
│ println("Top collocates of 'learning' in corpus:")
│ println(first(results, 5))
│ ```
│   exception = (UndefVarError(:Corpus, Main.__atexample__named__tutorial), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__tutorial at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ # Recreate results for filtering example
│ ct = ContingencyTable(text, "science", 4, 1)
│ results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│ # Filter for strong collocations
│ strong_collocations = filter(row ->
│     row.PMI > 2.0 &&           # Moderate PMI
│     row.LogDice > 5.0 &&        # Reliable collocation
│     row.LLR > 3.84,            # Statistically significant (p < 0.05)
│     results
│ )
│ 
│ println("Strong collocations of 'science':")
│ for row in eachrow(strong_collocations)
│     println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2)), ",
│             "LogDice=$(round(row.LogDice, digits=2))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/tutorial.md:140-158
│ ```@example tutorial
│ # Recreate results for filtering example
│ ct = ContingencyTable(text, "science", 4, 1)
│ results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│ # Filter for strong collocations
│ strong_collocations = filter(row ->
│     row.PMI > 2.0 &&           # Moderate PMI
│     row.LogDice > 5.0 &&        # Reliable collocation
│     row.LLR > 3.84,            # Statistically significant (p < 0.05)
│     results
│ )
│ 
│ println("Strong collocations of 'science':")
│ for row in eachrow(strong_collocations)
│     println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2)), ",
│             "LogDice=$(round(row.LogDice, digits=2))")
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("Data science is an interdisciplinary field that uses scientific methods,\nprocesses, algorithms and systems to extract knowledge from data.\nMachine learning is a key component of data science.\nData scientists use various tools for data analysis and data visualization.\n", "science", 4, 1), 0x0000000000006a62), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__tutorial at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using CSV
│ 
│ # Create results
│ results = assoc_score([PMI, LogDice], ct)
│ 
│ # Save to CSV
│ output_file = "collocations.csv"
│ CSV.write(output_file, results)
│ println("Results saved to $output_file")
│ 
│ # Clean up
│ rm(output_file)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/tutorial.md:164-177
│ ```@example tutorial
│ using CSV
│ 
│ # Create results
│ results = assoc_score([PMI, LogDice], ct)
│ 
│ # Save to CSV
│ output_file = "collocations.csv"
│ CSV.write(output_file, results)
│ println("Results saved to $output_file")
│ 
│ # Clean up
│ rm(output_file)
│ ```
│   exception = (ArgumentError("Package CSV not found in current path.\n- Run `import Pkg; Pkg.add(\"CSV\")` to install the CSV package."), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x000000011dc99232, Ptr{Nothing} @0x000000011dc99265, Ptr{Nothing} @0x0000000107d59b33, Ptr{Nothing} @0x000000011e017f57, Ptr{Nothing} @0x000000011d99c515, Ptr{Nothing} @0x0000000107d82fe1, Ptr{Nothing} @0x0000000107d82198, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ # Get top collocations for plotting
│ top_n = 10
│ sorted_results = sort(results, :PMI, rev=true)
│ top_results = first(sorted_results, min(top_n, nrow(sorted_results)))
│ 
│ # Extract data for plotting
│ words = String.(top_results.Collocate)
│ scores = top_results.PMI
│ 
│ println("Top $(length(words)) collocations ready for plotting:")
│ for (word, score) in zip(words, scores)
│     println("  $word: $(round(score, digits=2))")
│ end
│ 
│ # In practice, you would plot with:
│ # using Plots
│ # bar(words, scores, xlabel="Collocate", ylabel="PMI Score", rotation=45)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ function analyze_text(text::String, target_word::String)
│     # 1. Preprocess text
│     doc = prep_string(text, strip_case=true, strip_punctuation=true)
│ 
│     # 2. Create contingency table
│     ct = ContingencyTable(text(doc), target_word, windowsize=5, minfreq=2)
│ 
│     # 3. Calculate multiple metrics
│     results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│     # 4. Filter significant results
│     significant = filter(row -> row.LLR > 10.83, results)  # p < 0.001
│ 
│     # 5. Sort by PMI
│     sorted_results = sort(significant, :PMI, rev=true)
│ 
│     return sorted_results
│ end
│ 
│ # Use the function
│ sample_text = """
│ Natural language processing enables computers to understand human language.
│ Language models are fundamental to natural language processing.
│ Modern language models use transformer architectures.
│ """
│ 
│ results = analyze_text(sample_text, "language")
│ println("\nAnalysis complete. Top results:")
│ println(first(results, 3))
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/getting_started/tutorial.md:207-237
│ ```@example tutorial
│ function analyze_text(text::String, target_word::String)
│     # 1. Preprocess text
│     doc = prep_string(text, strip_case=true, strip_punctuation=true)
│ 
│     # 2. Create contingency table
│     ct = ContingencyTable(text(doc), target_word, windowsize=5, minfreq=2)
│ 
│     # 3. Calculate multiple metrics
│     results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│     # 4. Filter significant results
│     significant = filter(row -> row.LLR > 10.83, results)  # p < 0.001
│ 
│     # 5. Sort by PMI
│     sorted_results = sort(significant, :PMI, rev=true)
│ 
│     return sorted_results
│ end
│ 
│ # Use the function
│ sample_text = """
│ Natural language processing enables computers to understand human language.
│ Language models are fundamental to natural language processing.
│ Modern language models use transformer architectures.
│ """
│ 
│ results = analyze_text(sample_text, "language")
│ println("\nAnalysis complete. Top results:")
│ println(first(results, 3))
│ ```
│   exception = (MethodError(Core.kwcall, ((strip_case = true, strip_punctuation = true), TextAssociations.prep_string, "Natural language processing enables computers to understand human language.\nLanguage models are fundamental to natural language processing.\nModern language models use transformer architectures.\n"), 0x0000000000006a64), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edc6e0b, Ptr{Nothing} @0x000000019edc6e3d, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__tutorial at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Running ExpanderPipeline on guide/choosing_metrics.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @meta block:
│ CurrentModule = TextAssociations
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:337
┌ Debug: Evaluating @example block:
│ using TextAssociations, DataFrames
│ 
│ # Quick reference for metric selection
│ metric_guide = DataFrame(
│     Goal = [
│         "Find rare but meaningful associations",
│         "Validate known collocations",
│         "Compare across different corpora",
│         "Identify fixed expressions",
│         "Statistical significance testing",
│         "Symmetric word similarity"
│     ],
│     RecommendedMetrics = [
│         "PMI, PPMI",
│         "LLR, Chi-square",
│         "LogDice, PPMI",
│         "Dice, MI",
│         "LLR, Chi-square, T-score",
│         "Dice, Jaccard, Cosine"
│     ],
│     Reason = [
│         "High PMI for rare co-occurrences",
│         "Statistical tests for reliability",
│         "Stable across corpus sizes",
│         "High scores for fixed phrases",
│         "P-values for hypothesis testing",
│         "Symmetric similarity measures"
│     ]
│ )
│ 
│ println("Metric Selection Guide:")
│ for row in eachrow(metric_guide)
│     println("\n$(row.Goal):")
│     println("  Use: $(row.RecommendedMetrics)")
│     println("  Why: $(row.Reason)")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = """
│ Quantum computing revolutionizes computational power.
│ Classical computing cannot match quantum supremacy.
│ Quantum algorithms solve complex problems efficiently.
│ """
│ 
│ ct = ContingencyTable(text, "quantum", 3, 1)
│ results = assoc_score([PMI, PMI², PMI³, PPMI], ct)
│ 
│ println("PMI Family Comparison:")
│ for row in eachrow(results)
│     println("\n$(row.Collocate):")
│     println("  PMI:  $(round(row.PMI, digits=2)) - Standard measure")
│     println("  PMI²: $(round(row.PMI², digits=2)) - Emphasizes frequency")
│     println("  PMI³: $(round(row.PMI³, digits=2)) - Strong frequency bias")
│     println("  PPMI: $(round(row.PPMI, digits=2)) - No negative values")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/choosing_metrics.md:54-74
│ ```@example info_metrics
│ using TextAssociations
│ 
│ text = """
│ Quantum computing revolutionizes computational power.
│ Classical computing cannot match quantum supremacy.
│ Quantum algorithms solve complex problems efficiently.
│ """
│ 
│ ct = ContingencyTable(text, "quantum", 3, 1)
│ results = assoc_score([PMI, PMI², PMI³, PPMI], ct)
│ 
│ println("PMI Family Comparison:")
│ for row in eachrow(results)
│     println("\n$(row.Collocate):")
│     println("  PMI:  $(round(row.PMI, digits=2)) - Standard measure")
│     println("  PMI²: $(round(row.PMI², digits=2)) - Emphasizes frequency")
│     println("  PMI³: $(round(row.PMI³, digits=2)) - Strong frequency bias")
│     println("  PPMI: $(round(row.PPMI, digits=2)) - No negative values")
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("Quantum computing revolutionizes computational power.\nClassical computing cannot match quantum supremacy.\nQuantum algorithms solve complex problems efficiently.\n", "quantum", 3, 1), 0x0000000000006a68), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__info_metrics at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Text with clear patterns
│ text = """
│ Statistical analysis requires statistical methods and statistical tools.
│ Random words appear randomly without random patterns.
│ Data analysis needs careful analysis of data patterns.
│ """
│ 
│ ct = ContingencyTable(text, "statistical", 4, 1)
│ results = assoc_score([LLR, ChiSquare, Tscore, Zscore], ct)
│ 
│ println("Statistical Tests Comparison:")
│ for row in eachrow(results)
│     llr_sig = row.LLR > 10.83 ? "p<0.001" : row.LLR > 6.63 ? "p<0.01" : row.LLR > 3.84 ? "p<0.05" : "n.s."
│     chi_sig = row.ChiSquare > 10.83 ? "p<0.001" : row.ChiSquare > 6.63 ? "p<0.01" : row.ChiSquare > 3.84 ? "p<0.05" : "n.s."
│ 
│     println("\n$(row.Collocate):")
│     println("  LLR: $(round(row.LLR, digits=2)) ($llr_sig)")
│     println("  χ²:  $(round(row.ChiSquare, digits=2)) ($chi_sig)")
│     println("  t:   $(round(row.Tscore, digits=2))")
│     println("  z:   $(round(row.Zscore, digits=2))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/choosing_metrics.md:78-102
│ ```@example stat_metrics
│ using TextAssociations
│ 
│ # Text with clear patterns
│ text = """
│ Statistical analysis requires statistical methods and statistical tools.
│ Random words appear randomly without random patterns.
│ Data analysis needs careful analysis of data patterns.
│ """
│ 
│ ct = ContingencyTable(text, "statistical", 4, 1)
│ results = assoc_score([LLR, ChiSquare, Tscore, Zscore], ct)
│ 
│ println("Statistical Tests Comparison:")
│ for row in eachrow(results)
│     llr_sig = row.LLR > 10.83 ? "p<0.001" : row.LLR > 6.63 ? "p<0.01" : row.LLR > 3.84 ? "p<0.05" : "n.s."
│     chi_sig = row.ChiSquare > 10.83 ? "p<0.001" : row.ChiSquare > 6.63 ? "p<0.01" : row.ChiSquare > 3.84 ? "p<0.05" : "n.s."
│ 
│     println("\n$(row.Collocate):")
│     println("  LLR: $(round(row.LLR, digits=2)) ($llr_sig)")
│     println("  χ²:  $(round(row.ChiSquare, digits=2)) ($chi_sig)")
│     println("  t:   $(round(row.Tscore, digits=2))")
│     println("  z:   $(round(row.Zscore, digits=2))")
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("Statistical analysis requires statistical methods and statistical tools.\nRandom words appear randomly without random patterns.\nData analysis needs careful analysis of data patterns.\n", "statistical", 4, 1), 0x0000000000006a6a), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__stat_metrics at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = """
│ Machine learning and deep learning share similar foundations.
│ Neural networks enable deep learning applications.
│ Learning algorithms power machine learning systems.
│ """
│ 
│ ct = ContingencyTable(text, "learning", 3, 1)
│ results = assoc_score([Dice, LogDice, JaccardIdx, CosineSim], ct)
│ 
│ println("Similarity Metrics Comparison:")
│ for row in eachrow(results)
│     println("\n$(row.Collocate):")
│     println("  Dice:    $(round(row.Dice, digits=3)) ∈ [0,1]")
│     println("  LogDice: $(round(row.LogDice, digits=2)) ∈ [0,14]")
│     println("  Jaccard: $(round(row.JaccardIdx, digits=3)) ∈ [0,1]")
│     println("  Cosine:  $(round(row.CosineSim, digits=3)) ∈ [0,1]")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/choosing_metrics.md:106-126
│ ```@example sim_metrics
│ using TextAssociations
│ 
│ text = """
│ Machine learning and deep learning share similar foundations.
│ Neural networks enable deep learning applications.
│ Learning algorithms power machine learning systems.
│ """
│ 
│ ct = ContingencyTable(text, "learning", 3, 1)
│ results = assoc_score([Dice, LogDice, JaccardIdx, CosineSim], ct)
│ 
│ println("Similarity Metrics Comparison:")
│ for row in eachrow(results)
│     println("\n$(row.Collocate):")
│     println("  Dice:    $(round(row.Dice, digits=3)) ∈ [0,1]")
│     println("  LogDice: $(round(row.LogDice, digits=2)) ∈ [0,14]")
│     println("  Jaccard: $(round(row.JaccardIdx, digits=3)) ∈ [0,1]")
│     println("  Cosine:  $(round(row.CosineSim, digits=3)) ∈ [0,1]")
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("Machine learning and deep learning share similar foundations.\nNeural networks enable deep learning applications.\nLearning algorithms power machine learning systems.\n", "learning", 3, 1), 0x0000000000006a6c), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__sim_metrics at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Create texts with different frequency patterns
│ high_freq = "the the the word the the the"
│ low_freq = "rare unique word special unusual"
│ 
│ function analyze_frequency_sensitivity(text::String, node::String)
│     ct = ContingencyTable(text, node, 2, 1)
│ 
│     metrics = [PMI, LogDice, LLR, Dice]
│     results = assoc_score(metrics, ct)
│ 
│     return results
│ end
│ 
│ println("High frequency context:")
│ high_results = analyze_frequency_sensitivity(high_freq, "the")
│ for row in eachrow(high_results)
│     println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2)), LogDice=$(round(row.LogDice, digits=2))")
│ end
│ 
│ println("\nLow frequency context:")
│ low_results = analyze_frequency_sensitivity(low_freq, "word")
│ for row in eachrow(low_results)
│     println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2)), LogDice=$(round(row.LogDice, digits=2))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/choosing_metrics.md:132-159
│ ```@example freq_sensitivity
│ using TextAssociations
│ 
│ # Create texts with different frequency patterns
│ high_freq = "the the the word the the the"
│ low_freq = "rare unique word special unusual"
│ 
│ function analyze_frequency_sensitivity(text::String, node::String)
│     ct = ContingencyTable(text, node, 2, 1)
│ 
│     metrics = [PMI, LogDice, LLR, Dice]
│     results = assoc_score(metrics, ct)
│ 
│     return results
│ end
│ 
│ println("High frequency context:")
│ high_results = analyze_frequency_sensitivity(high_freq, "the")
│ for row in eachrow(high_results)
│     println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2)), LogDice=$(round(row.LogDice, digits=2))")
│ end
│ 
│ println("\nLow frequency context:")
│ low_results = analyze_frequency_sensitivity(low_freq, "word")
│ for row in eachrow(low_results)
│     println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2)), LogDice=$(round(row.LogDice, digits=2))")
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("the the the word the the the", "the", 2, 1), 0x0000000000006a6f), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edc8883, Ptr{Nothing} @0x000000019edc88bd, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__freq_sensitivity at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Simulate different corpus sizes
│ small_corpus = "machine learning uses algorithms"
│ medium_corpus = repeat("machine learning uses algorithms and data ", 10)
│ large_corpus = repeat("machine learning uses algorithms and data for predictions ", 100)
│ 
│ function compare_corpus_sizes(node::String)
│     sizes = [
│         ("Small", small_corpus),
│         ("Medium", medium_corpus),
│         ("Large", large_corpus)
│     ]
│ 
│     println("\nAnalyzing '$node' across corpus sizes:")
│ 
│     for (size_name, corpus) in sizes
│         ct = ContingencyTable(corpus, node, 3, 1)
│         results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│         if nrow(results) > 0
│             row = first(results)  # Look at first collocate
│             println("  $size_name: PMI=$(round(row.PMI, digits=2)), " *
│                    "LogDice=$(round(row.LogDice, digits=2)), " *
│                    "LLR=$(round(row.LLR, digits=2))")
│         end
│     end
│ end
│ 
│ compare_corpus_sizes("learning")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/choosing_metrics.md:163-194
│ ```@example corpus_stability
│ using TextAssociations
│ 
│ # Simulate different corpus sizes
│ small_corpus = "machine learning uses algorithms"
│ medium_corpus = repeat("machine learning uses algorithms and data ", 10)
│ large_corpus = repeat("machine learning uses algorithms and data for predictions ", 100)
│ 
│ function compare_corpus_sizes(node::String)
│     sizes = [
│         ("Small", small_corpus),
│         ("Medium", medium_corpus),
│         ("Large", large_corpus)
│     ]
│ 
│     println("\nAnalyzing '$node' across corpus sizes:")
│ 
│     for (size_name, corpus) in sizes
│         ct = ContingencyTable(corpus, node, 3, 1)
│         results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│         if nrow(results) > 0
│             row = first(results)  # Look at first collocate
│             println("  $size_name: PMI=$(round(row.PMI, digits=2)), " *
│                    "LogDice=$(round(row.LogDice, digits=2)), " *
│                    "LLR=$(round(row.LLR, digits=2))")
│         end
│     end
│ end
│ 
│ compare_corpus_sizes("learning")
│ ```
│   exception = (MethodError(ContingencyTable, ("machine learning uses algorithms", "learning", 3, 1), 0x0000000000006a72), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edc8c2f, Ptr{Nothing} @0x000000019edc8c69, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__corpus_stability at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function recommend_by_data(corpus_size::Symbol, frequency::Symbol, goal::Symbol)
│     # Rule-based recommendations
│     recommendations = []
│ 
│     # Corpus size considerations
│     if corpus_size == :small
│         push!(recommendations, "LogDice (stable for small corpora)")
│         push!(recommendations, "Dice (less affected by sparse data)")
│     elseif corpus_size == :large
│         push!(recommendations, "LLR (better with more data)")
│         push!(recommendations, "PMI (meaningful with sufficient data)")
│     end
│ 
│     # Frequency considerations
│     if frequency == :rare
│         push!(recommendations, "PMI/PPMI (highlights rare associations)")
│     elseif frequency == :common
│         push!(recommendations, "LogDice (handles high frequency well)")
│         push!(recommendations, "LLR (good for common words)")
│     end
│ 
│     # Goal considerations
│     if goal == :exploratory
│         push!(recommendations, "Multiple metrics for validation")
│     elseif goal == :confirmatory
│         push!(recommendations, "LLR with significance threshold")
│     end
│ 
│     return unique(recommendations)
│ end
│ 
│ # Example recommendation
│ recs = recommend_by_data(:small, :rare, :exploratory)
│ println("Recommendations for small corpus with rare words (exploratory):")
│ for rec in recs
│     println("  • $rec")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations, DataFrames
│ 
│ # Interpretation thresholds
│ thresholds = DataFrame(
│     Metric = ["PMI", "LogDice", "LLR", "Dice", "Jaccard"],
│     WeakAssociation = ["< 2", "< 5", "< 3.84", "< 0.1", "< 0.05"],
│     ModerateAssociation = ["2-5", "5-8", "3.84-10.83", "0.1-0.3", "0.05-0.2"],
│     StrongAssociation = ["> 5", "> 8", "> 10.83", "> 0.3", "> 0.2"],
│     Interpretation = [
│         "Higher = stronger",
│         "Max 14, stable",
│         "Statistical significance",
│         "0-1 scale",
│         "0-1 scale, stricter"
│     ]
│ )
│ 
│ println("Metric Interpretation Thresholds:")
│ for row in eachrow(thresholds)
│     println("\n$(row.Metric):")
│     println("  Weak: $(row.WeakAssociation)")
│     println("  Moderate: $(row.ModerateAssociation)")
│     println("  Strong: $(row.StrongAssociation)")
│     println("  Note: $(row.Interpretation)")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Different types of word relationships
│ texts = Dict(
│     "Fixed expression" => "by and large the results were positive",
│     "Technical term" => "machine learning algorithm performs classification",
│     "Semantic relation" => "doctor treats patient in hospital",
│     "Syntactic relation" => "very important extremely significant quite notable"
│ )
│ 
│ function analyze_relationship_type(text::String, node::String, collocate::String)
│     ct = ContingencyTable(text, node, 5, 1)
│     results = assoc_score([PMI, LogDice, Dice, LLR], ct)
│ 
│     # Find specific collocate
│     row = filter(r -> String(r.Collocate) == collocate, results)
│ 
│     if !isempty(row)
│         r = first(row)
│         println("$node + $collocate:")
│         println("  PMI: $(round(r.PMI, digits=2))")
│         println("  LogDice: $(round(r.LogDice, digits=2))")
│         println("  Dice: $(round(r.Dice, digits=3))")
│         println("  LLR: $(round(r.LLR, digits=2))")
│     end
│ end
│ 
│ # Analyze different relationship types
│ println("Fixed Expression:")
│ analyze_relationship_type(texts["Fixed expression"], "by", "and")
│ 
│ println("\nTechnical Term:")
│ analyze_relationship_type(texts["Technical term"], "machine", "learning")
│ 
│ println("\nSemantic Relation:")
│ analyze_relationship_type(texts["Semantic relation"], "doctor", "patient")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/choosing_metrics.md:303-340
│ ```@example practical
│ using TextAssociations
│ 
│ # Different types of word relationships
│ texts = Dict(
│     "Fixed expression" => "by and large the results were positive",
│     "Technical term" => "machine learning algorithm performs classification",
│     "Semantic relation" => "doctor treats patient in hospital",
│     "Syntactic relation" => "very important extremely significant quite notable"
│ )
│ 
│ function analyze_relationship_type(text::String, node::String, collocate::String)
│     ct = ContingencyTable(text, node, 5, 1)
│     results = assoc_score([PMI, LogDice, Dice, LLR], ct)
│ 
│     # Find specific collocate
│     row = filter(r -> String(r.Collocate) == collocate, results)
│ 
│     if !isempty(row)
│         r = first(row)
│         println("$node + $collocate:")
│         println("  PMI: $(round(r.PMI, digits=2))")
│         println("  LogDice: $(round(r.LogDice, digits=2))")
│         println("  Dice: $(round(r.Dice, digits=3))")
│         println("  LLR: $(round(r.LLR, digits=2))")
│     end
│ end
│ 
│ # Analyze different relationship types
│ println("Fixed Expression:")
│ analyze_relationship_type(texts["Fixed expression"], "by", "and")
│ 
│ println("\nTechnical Term:")
│ analyze_relationship_type(texts["Technical term"], "machine", "learning")
│ 
│ println("\nSemantic Relation:")
│ analyze_relationship_type(texts["Semantic relation"], "doctor", "patient")
│ ```
│   exception = (MethodError(ContingencyTable, ("by and large the results were positive", "by", 5, 1), 0x0000000000006a7b), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edca0ad, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__practical at statement 2, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations, Statistics
│ 
│ function combined_score_analysis(ct::ContingencyTable)
│     # Calculate multiple metrics
│     results = assoc_score([PMI, LogDice, LLR, Dice], ct)
│ 
│     # Normalize scores (0-1 range)
│     for col in [:PMI, :LogDice, :LLR, :Dice]
│         if hasproperty(results, col)
│             values = results[!, col]
│             min_val, max_val = extrema(values)
│             if max_val > min_val
│                 results[!, Symbol(col, :_norm)] = (values .- min_val) ./ (max_val - min_val)
│             else
│                 results[!, Symbol(col, :_norm)] = zeros(length(values))
│             end
│         end
│     end
│ 
│     # Combined score (weighted average)
│     results.CombinedScore = (
│         0.3 * results.PMI_norm +
│         0.3 * results.LogDice_norm +
│         0.2 * results.LLR_norm +
│         0.2 * results.Dice_norm
│     )
│ 
│     # Rank by combined score
│     sort!(results, :CombinedScore, rev=true)
│ 
│     return results
│ end
│ 
│ text = "Data science requires data analysis and data visualization"
│ ct = ContingencyTable(text, "data", 3, 1)
│ combined = combined_score_analysis(ct)
│ 
│ println("Combined Metric Analysis:")
│ for row in eachrow(first(combined, 3))
│     println("$(row.Collocate): Combined=$(round(row.CombinedScore, digits=3))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/choosing_metrics.md:346-388
│ ```@example combining
│ using TextAssociations, Statistics
│ 
│ function combined_score_analysis(ct::ContingencyTable)
│     # Calculate multiple metrics
│     results = assoc_score([PMI, LogDice, LLR, Dice], ct)
│ 
│     # Normalize scores (0-1 range)
│     for col in [:PMI, :LogDice, :LLR, :Dice]
│         if hasproperty(results, col)
│             values = results[!, col]
│             min_val, max_val = extrema(values)
│             if max_val > min_val
│                 results[!, Symbol(col, :_norm)] = (values .- min_val) ./ (max_val - min_val)
│             else
│                 results[!, Symbol(col, :_norm)] = zeros(length(values))
│             end
│         end
│     end
│ 
│     # Combined score (weighted average)
│     results.CombinedScore = (
│         0.3 * results.PMI_norm +
│         0.3 * results.LogDice_norm +
│         0.2 * results.LLR_norm +
│         0.2 * results.Dice_norm
│     )
│ 
│     # Rank by combined score
│     sort!(results, :CombinedScore, rev=true)
│ 
│     return results
│ end
│ 
│ text = "Data science requires data analysis and data visualization"
│ ct = ContingencyTable(text, "data", 3, 1)
│ combined = combined_score_analysis(ct)
│ 
│ println("Combined Metric Analysis:")
│ for row in eachrow(first(combined, 3))
│     println("$(row.Collocate): Combined=$(round(row.CombinedScore, digits=3))")
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("Data science requires data analysis and data visualization", "data", 3, 1), 0x0000000000006a7e), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__combining at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations, Statistics
│ 
│ function metric_stability_test(base_text::String, node::String, iterations::Int=10)
│     metric_scores = Dict{Symbol,Vector{Float64}}()
│ 
│     for i in 1:iterations
│         # Add noise to simulate variation
│         noisy_text = base_text * " " * join(rand(split(base_text), 5), " ")
│ 
│         ct = ContingencyTable(noisy_text, node, 3, 1)
│         results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│         if nrow(results) > 0
│             for metric in [:PMI, :LogDice, :LLR]
│                 push!(get!(metric_scores, metric, Float64[]), results[1, metric])
│             end
│         end
│     end
│ 
│     # Calculate stability (lower std = more stable)
│     println("Metric Stability Analysis ($iterations iterations):")
│     for (metric, scores) in metric_scores
│         stability = std(scores) / mean(scores)  # Coefficient of variation
│         println("  $metric: CV = $(round(stability, digits=3)) ($(stability < 0.1 ? "stable" : "unstable"))")
│     end
│ end
│ 
│ base = "artificial intelligence and machine learning are related fields"
│ metric_stability_test(base, "intelligence", 10)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/choosing_metrics.md:392-422
│ ```@example stability
│ using TextAssociations, Statistics
│ 
│ function metric_stability_test(base_text::String, node::String, iterations::Int=10)
│     metric_scores = Dict{Symbol,Vector{Float64}}()
│ 
│     for i in 1:iterations
│         # Add noise to simulate variation
│         noisy_text = base_text * " " * join(rand(split(base_text), 5), " ")
│ 
│         ct = ContingencyTable(noisy_text, node, 3, 1)
│         results = assoc_score([PMI, LogDice, LLR], ct)
│ 
│         if nrow(results) > 0
│             for metric in [:PMI, :LogDice, :LLR]
│                 push!(get!(metric_scores, metric, Float64[]), results[1, metric])
│             end
│         end
│     end
│ 
│     # Calculate stability (lower std = more stable)
│     println("Metric Stability Analysis ($iterations iterations):")
│     for (metric, scores) in metric_scores
│         stability = std(scores) / mean(scores)  # Coefficient of variation
│         println("  $metric: CV = $(round(stability, digits=3)) ($(stability < 0.1 ? "stable" : "unstable"))")
│     end
│ end
│ 
│ base = "artificial intelligence and machine learning are related fields"
│ metric_stability_test(base, "intelligence", 10)
│ ```
│   exception = (MethodError(ContingencyTable, ("artificial intelligence and machine learning are related fields fields intelligence fields fields related", "intelligence", 3, 1), 0x0000000000006a82), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edca81c, Ptr{Nothing} @0x000000019edca9f4, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__stability at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Running ExpanderPipeline on guide/concepts.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @meta block:
│ CurrentModule = TextAssociations
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:337
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = "The data scientist analyzed the data carefully."
│ 
│ # Visualize co-occurrence windows
│ function show_cooccurrences(text::String, node::String, windowsize::Int)
│     words = split(lowercase(text))
│     node_positions = findall(==(lowercase(node)), words)
│ 
│     println("Text: $text")
│     println("Node word: '$node' at positions $node_positions")
│     println("Window size: $windowsize")
│ 
│     for pos in node_positions
│         left_window = max(1, pos - windowsize)
│         right_window = min(length(words), pos + windowsize)
│ 
│         context = words[left_window:right_window]
│         println("\nWindow around position $pos:")
│         println("  ", join(context, " "))
│     end
│ end
│ 
│ show_cooccurrences(text, "data", 2)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations, DataFrames
│ 
│ # Create a simple example
│ text = "big data and data science require data analysis"
│ ct = ContingencyTable(text, "data", 2, 1)
│ 
│ # Access the internal table
│ internal = cached_data(ct.con_tbl)
│ if !isempty(internal)
│     println("Contingency table for 'data':")
│     for row in eachrow(internal)
│         println("\nCollocate: $(row.Collocate)")
│         println("  a (both occur): $(row.a)")
│         println("  b (only node): $(row.b)")
│         println("  c (only collocate): $(row.c)")
│         println("  d (neither): $(row.d)")
│         println("  Total (N): $(row.N)")
│     end
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/concepts.md:56-76
│ ```@example contingency
│ using TextAssociations, DataFrames
│ 
│ # Create a simple example
│ text = "big data and data science require data analysis"
│ ct = ContingencyTable(text, "data", 2, 1)
│ 
│ # Access the internal table
│ internal = cached_data(ct.con_tbl)
│ if !isempty(internal)
│     println("Contingency table for 'data':")
│     for row in eachrow(internal)
│         println("\nCollocate: $(row.Collocate)")
│         println("  a (both occur): $(row.a)")
│         println("  b (only node): $(row.b)")
│         println("  c (only collocate): $(row.c)")
│         println("  d (neither): $(row.d)")
│         println("  Total (N): $(row.N)")
│     end
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("big data and data science require data analysis", "data", 2, 1), 0x0000000000006a87), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__contingency at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Demonstrate different metric properties
│ text = """
│ The bank provides financial services.
│ The river bank was steep and muddy.
│ Financial analysis requires careful consideration.
│ The bank offers investment opportunities.
│ """
│ 
│ ct = ContingencyTable(text, "bank", 3, 1)
│ 
│ # Calculate different metric types
│ info_metrics = assoc_score([PMI, PPMI], ct)
│ stat_metrics = assoc_score([LLR, ChiSquare], ct)
│ sim_metrics = assoc_score([Dice, JaccardIdx], ct)
│ 
│ println("Information-theoretic metrics (PMI, PPMI):")
│ println("  Focus: Surprise/informativeness")
│ println("  High when: Words occur together more than chance")
│ 
│ println("\nStatistical metrics (LLR, ChiSquare):")
│ println("  Focus: Significance/reliability")
│ println("  High when: Association is statistically significant")
│ 
│ println("\nSimilarity metrics (Dice, Jaccard):")
│ println("  Focus: Overlap/similarity")
│ println("  High when: Words share contexts")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/concepts.md:95-124
│ ```@example metrics
│ using TextAssociations
│ 
│ # Demonstrate different metric properties
│ text = """
│ The bank provides financial services.
│ The river bank was steep and muddy.
│ Financial analysis requires careful consideration.
│ The bank offers investment opportunities.
│ """
│ 
│ ct = ContingencyTable(text, "bank", 3, 1)
│ 
│ # Calculate different metric types
│ info_metrics = assoc_score([PMI, PPMI], ct)
│ stat_metrics = assoc_score([LLR, ChiSquare], ct)
│ sim_metrics = assoc_score([Dice, JaccardIdx], ct)
│ 
│ println("Information-theoretic metrics (PMI, PPMI):")
│ println("  Focus: Surprise/informativeness")
│ println("  High when: Words occur together more than chance")
│ 
│ println("\nStatistical metrics (LLR, ChiSquare):")
│ println("  Focus: Significance/reliability")
│ println("  High when: Association is statistically significant")
│ 
│ println("\nSimilarity metrics (Dice, Jaccard):")
│ println("  Focus: Overlap/similarity")
│ println("  High when: Words share contexts")
│ ```
│   exception = (MethodError(ContingencyTable, ("The bank provides financial services.\nThe river bank was steep and muddy.\nFinancial analysis requires careful consideration.\nThe bank offers investment opportunities.\n", "bank", 3, 1), 0x0000000000006a89), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__metrics at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Score interpretation guidelines
│ function interpret_scores(results::DataFrame)
│     for row in eachrow(results)
│         collocate = row.Collocate
│ 
│         # PMI interpretation
│         pmi_strength = if row.PMI > 5
│             "very strong"
│         elseif row.PMI > 3
│             "strong"
│         elseif row.PMI > 0
│             "positive"
│         else
│             "negative"
│         end
│ 
│         # LogDice interpretation (max 14)
│         dice_reliability = if row.LogDice > 10
│             "highly reliable"
│         elseif row.LogDice > 7
│             "reliable"
│         else
│             "weak"
│         end
│ 
│         println("$collocate:")
│         println("  PMI: $(round(row.PMI, digits=2)) ($pmi_strength association)")
│         println("  LogDice: $(round(row.LogDice, digits=2)) ($dice_reliability)")
│     end
│ end
│ 
│ # Example
│ ct = ContingencyTable("machine learning uses learning algorithms", "learning", 2, 1)
│ results = assoc_score([PMI, LogDice], ct)
│ interpret_scores(results)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/concepts.md:128-166
│ ```@example interpret
│ using TextAssociations
│ 
│ # Score interpretation guidelines
│ function interpret_scores(results::DataFrame)
│     for row in eachrow(results)
│         collocate = row.Collocate
│ 
│         # PMI interpretation
│         pmi_strength = if row.PMI > 5
│             "very strong"
│         elseif row.PMI > 3
│             "strong"
│         elseif row.PMI > 0
│             "positive"
│         else
│             "negative"
│         end
│ 
│         # LogDice interpretation (max 14)
│         dice_reliability = if row.LogDice > 10
│             "highly reliable"
│         elseif row.LogDice > 7
│             "reliable"
│         else
│             "weak"
│         end
│ 
│         println("$collocate:")
│         println("  PMI: $(round(row.PMI, digits=2)) ($pmi_strength association)")
│         println("  LogDice: $(round(row.LogDice, digits=2)) ($dice_reliability)")
│     end
│ end
│ 
│ # Example
│ ct = ContingencyTable("machine learning uses learning algorithms", "learning", 2, 1)
│ results = assoc_score([PMI, LogDice], ct)
│ interpret_scores(results)
│ ```
│   exception = (UndefVarError(:DataFrame, Main.__atexample__named__interpret), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__interpret at statement 4, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Different normalization strategies
│ configs = [
│     (name="Minimal",
│      config=TextNorm(strip_case=false, strip_punctuation=false)),
│     (name="Standard",
│      config=TextNorm(strip_case=true, strip_punctuation=true)),
│     (name="Aggressive",
│      config=TextNorm(strip_case=true, strip_punctuation=true,
│                     strip_accents=true, normalize_whitespace=true))
│ ]
│ 
│ test_text = "Hello, WORLD! Café résumé... Multiple   spaces."
│ 
│ for (name, config) in configs
│     doc = prep_string(test_text; config.config)
│     println("$name: '$(text(doc))'")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/concepts.md:174-194
│ ```@example textnorm
│ using TextAssociations
│ 
│ # Different normalization strategies
│ configs = [
│     (name="Minimal",
│      config=TextNorm(strip_case=false, strip_punctuation=false)),
│     (name="Standard",
│      config=TextNorm(strip_case=true, strip_punctuation=true)),
│     (name="Aggressive",
│      config=TextNorm(strip_case=true, strip_punctuation=true,
│                     strip_accents=true, normalize_whitespace=true))
│ ]
│ 
│ test_text = "Hello, WORLD! Café résumé... Multiple   spaces."
│ 
│ for (name, config) in configs
│     doc = prep_string(test_text; config.config)
│     println("$name: '$(text(doc))'")
│ end
│ ```
│   exception = (ErrorException("type TextNorm has no field config"), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dcfda9, Ptr{Nothing} @0x0000000107dd00fc, Ptr{Nothing} @0x000000019ed7d454, Ptr{Nothing} @0x000000019ed7d492, Ptr{Nothing} @0x000000019edcb498, Ptr{Nothing} @0x0000000107d828d5, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Different Unicode forms can affect matching
│ text1 = "café"  # é as single character
│ text2 = "café"  # e + combining accent
│ 
│ println("Visually identical: ", text1 == text2)
│ println("After NFC normalization: ",
│     Unicode.normalize(text1, :NFC) == Unicode.normalize(text2, :NFC))
│ 
│ # TextNorm handles this automatically
│ config = TextNorm(unicode_form=:NFC)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/concepts.md:200-213
│ ```@example unicode
│ using TextAssociations
│ 
│ # Different Unicode forms can affect matching
│ text1 = "café"  # é as single character
│ text2 = "café"  # e + combining accent
│ 
│ println("Visually identical: ", text1 == text2)
│ println("After NFC normalization: ",
│     Unicode.normalize(text1, :NFC) == Unicode.normalize(text2, :NFC))
│ 
│ # TextNorm handles this automatically
│ config = TextNorm(unicode_form=:NFC)
│ ```
│   exception = (UndefVarError(:Unicode, Main.__atexample__named__unicode), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__unicode at statement 2, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = """
│ The main hypothesis was confirmed.
│ Preliminary results support the hypothesis.
│ The xyzabc appeared only once.
│ """
│ 
│ # Compare different thresholds
│ for minfreq in [1, 2, 3]
│     ct = ContingencyTable(text, "the", 3, minfreq)
│     results = assoc_score(PMI, ct)
│     println("minfreq=$minfreq: $(nrow(results)) collocates")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/concepts.md:221-236
│ ```@example minfreq
│ using TextAssociations
│ 
│ text = """
│ The main hypothesis was confirmed.
│ Preliminary results support the hypothesis.
│ The xyzabc appeared only once.
│ """
│ 
│ # Compare different thresholds
│ for minfreq in [1, 2, 3]
│     ct = ContingencyTable(text, "the", 3, minfreq)
│     results = assoc_score(PMI, ct)
│     println("minfreq=$minfreq: $(nrow(results)) collocates")
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("The main hypothesis was confirmed.\nPreliminary results support the hypothesis.\nThe xyzabc appeared only once.\n", "the", 3, 1), 0x0000000000006a91), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edcc4cb, Ptr{Nothing} @0x0000000107d828d5, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Contingency tables are computed lazily
│ println("Creating ContingencyTable...")
│ ct = ContingencyTable("sample text here", "text", 3, 1)
│ println("Created (not computed yet)")
│ 
│ # Computation happens on first use
│ println("\nFirst access (triggers computation):")
│ @time results = assoc_score(PMI, ct)
│ 
│ println("\nSecond access (uses cache):")
│ @time results2 = assoc_score(LogDice, ct)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/concepts.md:255-269
│ ```@example lazy
│ using TextAssociations
│ 
│ # Contingency tables are computed lazily
│ println("Creating ContingencyTable...")
│ ct = ContingencyTable("sample text here", "text", 3, 1)
│ println("Created (not computed yet)")
│ 
│ # Computation happens on first use
│ println("\nFirst access (triggers computation):")
│ @time results = assoc_score(PMI, ct)
│ 
│ println("\nSecond access (uses cache):")
│ @time results2 = assoc_score(LogDice, ct)
│ ```
│   exception = (MethodError(ContingencyTable, ("sample text here", "text", 3, 1), 0x0000000000006a93), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__lazy at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = """
│ Statistical analysis requires careful statistical methods.
│ The statistical approach yields statistical significance.
│ Random words appear randomly without pattern.
│ """
│ 
│ ct = ContingencyTable(text, "statistical", 3, 1)
│ results = assoc_score([LLR, ChiSquare], ct)
│ 
│ # Interpret statistical significance
│ for row in eachrow(results)
│     llr = row.LLR
│     chi2 = row.ChiSquare
│ 
│     # LLR critical values
│     p_value = if llr > 10.83
│         "p < 0.001"
│     elseif llr > 6.63
│         "p < 0.01"
│     elseif llr > 3.84
│         "p < 0.05"
│     else
│         "not significant"
│     end
│ 
│     println("$(row.Collocate): LLR=$(round(llr, digits=2)) ($p_value)")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/concepts.md:283-313
│ ```@example significance
│ using TextAssociations
│ 
│ text = """
│ Statistical analysis requires careful statistical methods.
│ The statistical approach yields statistical significance.
│ Random words appear randomly without pattern.
│ """
│ 
│ ct = ContingencyTable(text, "statistical", 3, 1)
│ results = assoc_score([LLR, ChiSquare], ct)
│ 
│ # Interpret statistical significance
│ for row in eachrow(results)
│     llr = row.LLR
│     chi2 = row.ChiSquare
│ 
│     # LLR critical values
│     p_value = if llr > 10.83
│         "p < 0.001"
│     elseif llr > 6.63
│         "p < 0.01"
│     elseif llr > 3.84
│         "p < 0.05"
│     else
│         "not significant"
│     end
│ 
│     println("$(row.Collocate): LLR=$(round(llr, digits=2)) ($p_value)")
│ end
│ ```
│   exception = (MethodError(ContingencyTable, ("Statistical analysis requires careful statistical methods.\nThe statistical approach yields statistical significance.\nRandom words appear randomly without pattern.\n", "statistical", 3, 1), 0x0000000000006a95), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__significance at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Running ExpanderPipeline on guide/corpus_analysis.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @meta block:
│ CurrentModule = TextAssociations
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:337
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ using DataFrames
│ 
│ # Create example files
│ temp_dir = mktempdir()
│ 
│ # Create sample text files
│ texts = [
│     "Machine learning transforms data into insights.",
│     "Deep learning uses neural networks extensively.",
│     "Data science combines statistics and programming."
│ ]
│ 
│ for (i, text) in enumerate(texts)
│     write(joinpath(temp_dir, "doc$i.txt"), text)
│ end
│ 
│ # Load from directory
│ corpus = read_corpus(temp_dir;
│     norm_config=TextNorm(strip_case=true, strip_punctuation=true),
│     min_doc_length=5,
│     max_doc_length=1000
│ )
│ 
│ println("Loaded $(length(corpus.documents)) documents")
│ println("Vocabulary size: $(length(corpus.vocabulary))")
│ 
│ # Clean up
│ rm(temp_dir, recursive=true)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations, DataFrames
│ 
│ # Create a DataFrame with text and metadata
│ df = DataFrame(
│     text = [
│         "Artificial intelligence revolutionizes technology.",
│         "Machine learning enables pattern recognition.",
│         "Deep learning mimics human neural networks."
│     ],
│     category = ["AI", "ML", "DL"],
│     year = [2023, 2023, 2024],
│     importance = ["high", "high", "medium"]
│ )
│ 
│ # Load corpus from DataFrame
│ corpus = read_corpus_df(df;
│     text_column=:text,
│     metadata_columns=[:category, :year, :importance],
│     norm_config=TextNorm()
│ )
│ 
│ println("Corpus from DataFrame:")
│ println("  Documents: $(length(corpus.documents))")
│ println("  Metadata fields: $(keys(corpus.metadata))")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Create a sample corpus
│ texts = [
│     "Natural language processing enables computers to understand human language.",
│     "Machine learning algorithms learn patterns from data automatically.",
│     "Deep neural networks consist of multiple hidden layers.",
│     "Artificial intelligence includes machine learning and deep learning."
│ ]
│ 
│ docs = [StringDocument(t) for t in texts]
│ corpus = Corpus(docs)
│ 
│ # Get comprehensive statistics
│ stats = corpus_stats(corpus; include_token_distribution=true)
│ 
│ println("Corpus Statistics:")
│ println("  Documents: $(stats[:num_documents])")
│ println("  Total tokens: $(stats[:total_tokens])")
│ println("  Unique tokens: $(stats[:unique_tokens])")
│ println("  Type-token ratio: $(round(stats[:type_token_ratio], digits=4))")
│ println("  Hapax legomena: $(stats[:hapax_legomena])")
│ println("\nVocabulary coverage:")
│ println("  50% coverage: $(stats[:words_for_50_percent_coverage]) words")
│ println("  90% coverage: $(stats[:words_for_90_percent_coverage]) words")
│ 
│ # Display coverage summary
│ coverage_summary(stats)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:78-107
│ ```@example stats
│ using TextAssociations
│ 
│ # Create a sample corpus
│ texts = [
│     "Natural language processing enables computers to understand human language.",
│     "Machine learning algorithms learn patterns from data automatically.",
│     "Deep neural networks consist of multiple hidden layers.",
│     "Artificial intelligence includes machine learning and deep learning."
│ ]
│ 
│ docs = [StringDocument(t) for t in texts]
│ corpus = Corpus(docs)
│ 
│ # Get comprehensive statistics
│ stats = corpus_stats(corpus; include_token_distribution=true)
│ 
│ println("Corpus Statistics:")
│ println("  Documents: $(stats[:num_documents])")
│ println("  Total tokens: $(stats[:total_tokens])")
│ println("  Unique tokens: $(stats[:unique_tokens])")
│ println("  Type-token ratio: $(round(stats[:type_token_ratio], digits=4))")
│ println("  Hapax legomena: $(stats[:hapax_legomena])")
│ println("\nVocabulary coverage:")
│ println("  50% coverage: $(stats[:words_for_50_percent_coverage]) words")
│ println("  90% coverage: $(stats[:words_for_90_percent_coverage]) words")
│ 
│ # Display coverage summary
│ coverage_summary(stats)
│ ```
│   exception = (UndefVarError(:StringDocument, Main.__atexample__named__stats), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d644b3, Ptr{Nothing} @0x000000019edccd4d, Ptr{Nothing} @0x000000019edcceaf, Ptr{Nothing} @0x000000019edcd2b9, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__stats at statement 11, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Analyze token distribution
│ dist = token_distribution(corpus)
│ 
│ println("\nTop 10 most frequent tokens:")
│ for row in eachrow(first(dist, 10))
│     println("  $(row.Token): $(row.Frequency) (TF-IDF: $(round(row.TFIDF, digits=2)))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:111-121
│ ```@example token_dist
│ using TextAssociations
│ 
│ # Analyze token distribution
│ dist = token_distribution(corpus)
│ 
│ println("\nTop 10 most frequent tokens:")
│ for row in eachrow(first(dist, 10))
│     println("  $(row.Token): $(row.Frequency) (TF-IDF: $(round(row.TFIDF, digits=2)))")
│ end
│ ```
│   exception = (UndefVarError(:corpus, Main.__atexample__named__token_dist), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__token_dist at statement 1, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Analyze a single word across the corpus
│ results = analyze_node(
│     corpus,
│     "learning",
│     PMI;
│     windowsize=5,
│     minfreq=2
│ )
│ 
│ println("Top collocates of 'learning' across corpus:")
│ for row in eachrow(first(results, 5))
│     println("  $(row.Collocate): Score=$(round(row.Score, digits=2)), DocFreq=$(row.DocFrequency)")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:127-143
│ ```@example single_node
│ using TextAssociations
│ 
│ # Analyze a single word across the corpus
│ results = analyze_node(
│     corpus,
│     "learning",
│     PMI;
│     windowsize=5,
│     minfreq=2
│ )
│ 
│ println("Top collocates of 'learning' across corpus:")
│ for row in eachrow(first(results, 5))
│     println("  $(row.Collocate): Score=$(round(row.Score, digits=2)), DocFreq=$(row.DocFrequency)")
│ end
│ ```
│   exception = (UndefVarError(:corpus, Main.__atexample__named__single_node), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__single_node at statement 5, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Analyze multiple nodes
│ nodes = ["machine", "learning", "neural"]
│ metrics = [PMI, LogDice, LLR]
│ 
│ analysis = analyze_nodes(
│     corpus,
│     nodes,
│     metrics;
│     windowsize=5,
│     minfreq=1,
│     top_n=10
│ )
│ 
│ # Access results for each node
│ for node in analysis.nodes
│     node_results = analysis.results[node]
│     if !isempty(node_results)
│         println("\nTop collocates for '$node':")
│         for row in eachrow(first(node_results, 3))
│             println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│         end
│     end
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:147-173
│ ```@example multi_node
│ using TextAssociations
│ 
│ # Analyze multiple nodes
│ nodes = ["machine", "learning", "neural"]
│ metrics = [PMI, LogDice, LLR]
│ 
│ analysis = analyze_nodes(
│     corpus,
│     nodes,
│     metrics;
│     windowsize=5,
│     minfreq=1,
│     top_n=10
│ )
│ 
│ # Access results for each node
│ for node in analysis.nodes
│     node_results = analysis.results[node]
│     if !isempty(node_results)
│         println("\nTop collocates for '$node':")
│         for row in eachrow(first(node_results, 3))
│             println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│         end
│     end
│ end
│ ```
│   exception = (UndefVarError(:corpus, Main.__atexample__named__multi_node), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__multi_node at statement 5, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations, Dates
│ 
│ # Create corpus with temporal metadata
│ df = DataFrame(
│     text = [
│         "Early AI used rule-based systems.",
│         "Machine learning emerged as dominant approach.",
│         "Deep learning revolutionized the field.",
│         "Transformers changed natural language processing."
│     ],
│     year = [1980, 1990, 2010, 2020]
│ )
│ 
│ temporal_corpus = read_corpus_df(df;
│     text_column=:text,
│     metadata_columns=[:year]
│ )
│ 
│ # Analyze temporal trends
│ temporal_analysis = analyze_temporal(
│     temporal_corpus,
│     ["AI", "learning"],
│     :year,
│     PMI;
│     time_bins=2,
│     windowsize=5,
│     minfreq=1
│ )
│ 
│ println("Temporal Analysis Results:")
│ println("Time periods: ", temporal_analysis.time_periods)
│ if !isempty(temporal_analysis.trend_analysis)
│     println("\nTrend analysis:")
│     for row in eachrow(first(temporal_analysis.trend_analysis, 5))
│         println("  $(row.Node) + $(row.Collocate): correlation=$(round(row.Correlation, digits=2))")
│     end
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:179-217
│ ```@example temporal
│ using TextAssociations, Dates
│ 
│ # Create corpus with temporal metadata
│ df = DataFrame(
│     text = [
│         "Early AI used rule-based systems.",
│         "Machine learning emerged as dominant approach.",
│         "Deep learning revolutionized the field.",
│         "Transformers changed natural language processing."
│     ],
│     year = [1980, 1990, 2010, 2020]
│ )
│ 
│ temporal_corpus = read_corpus_df(df;
│     text_column=:text,
│     metadata_columns=[:year]
│ )
│ 
│ # Analyze temporal trends
│ temporal_analysis = analyze_temporal(
│     temporal_corpus,
│     ["AI", "learning"],
│     :year,
│     PMI;
│     time_bins=2,
│     windowsize=5,
│     minfreq=1
│ )
│ 
│ println("Temporal Analysis Results:")
│ println("Time periods: ", temporal_analysis.time_periods)
│ if !isempty(temporal_analysis.trend_analysis)
│     println("\nTrend analysis:")
│     for row in eachrow(first(temporal_analysis.trend_analysis, 5))
│         println("  $(row.Node) + $(row.Collocate): correlation=$(round(row.Correlation, digits=2))")
│     end
│ end
│ ```
│   exception = (UndefVarError(:DataFrame, Main.__atexample__named__temporal), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__temporal at statement 6, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Create corpus with categories
│ df = DataFrame(
│     text = [
│         "Scientific research requires rigorous methodology.",
│         "Business analysis focuses on market trends.",
│         "Scientific experiments test hypotheses systematically.",
│         "Business strategy drives organizational success."
│     ],
│     field = ["Science", "Business", "Science", "Business"]
│ )
│ 
│ categorized_corpus = read_corpus_df(df;
│     text_column=:text,
│     metadata_columns=[:field]
│ )
│ 
│ # Compare subcorpora
│ comparison = compare_subcorpora(
│     categorized_corpus,
│     :field,
│     "analysis",
│     PMI;
│     windowsize=5,
│     minfreq=1
│ )
│ 
│ println("Subcorpus Comparison:")
│ for (subcorpus_name, results) in comparison.results
│     if !isempty(results)
│         println("\n$subcorpus_name subcorpus:")
│         for row in eachrow(first(results, 2))
│             println("  $(row.Collocate): Score=$(round(row.Score, digits=2))")
│         end
│     end
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:221-259
│ ```@example subcorpus
│ using TextAssociations
│ 
│ # Create corpus with categories
│ df = DataFrame(
│     text = [
│         "Scientific research requires rigorous methodology.",
│         "Business analysis focuses on market trends.",
│         "Scientific experiments test hypotheses systematically.",
│         "Business strategy drives organizational success."
│     ],
│     field = ["Science", "Business", "Science", "Business"]
│ )
│ 
│ categorized_corpus = read_corpus_df(df;
│     text_column=:text,
│     metadata_columns=[:field]
│ )
│ 
│ # Compare subcorpora
│ comparison = compare_subcorpora(
│     categorized_corpus,
│     :field,
│     "analysis",
│     PMI;
│     windowsize=5,
│     minfreq=1
│ )
│ 
│ println("Subcorpus Comparison:")
│ for (subcorpus_name, results) in comparison.results
│     if !isempty(results)
│         println("\n$subcorpus_name subcorpus:")
│         for row in eachrow(first(results, 2))
│             println("  $(row.Collocate): Score=$(round(row.Score, digits=2))")
│         end
│     end
│ end
│ ```
│   exception = (UndefVarError(:DataFrame, Main.__atexample__named__subcorpus), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__subcorpus at statement 6, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Extract keywords using TF-IDF
│ keywords = keyterms(
│     corpus;
│     method=:tfidf,
│     num_keywords=10,
│     min_doc_freq=1,
│     max_doc_freq_ratio=0.8
│ )
│ 
│ println("\nTop Keywords (TF-IDF):")
│ for row in eachrow(keywords)
│     println("  $(row.Keyword): TFIDF=$(round(row.TFIDF, digits=2)), DocFreq=$(row.DocFreq)")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:263-279
│ ```@example keywords
│ using TextAssociations
│ 
│ # Extract keywords using TF-IDF
│ keywords = keyterms(
│     corpus;
│     method=:tfidf,
│     num_keywords=10,
│     min_doc_freq=1,
│     max_doc_freq_ratio=0.8
│ )
│ 
│ println("\nTop Keywords (TF-IDF):")
│ for row in eachrow(keywords)
│     println("  $(row.Keyword): TFIDF=$(round(row.TFIDF, digits=2)), DocFreq=$(row.DocFreq)")
│ end
│ ```
│   exception = (UndefVarError(:corpus, Main.__atexample__named__keywords), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__keywords at statement 5, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Build collocation network
│ network = colloc_graph(
│     corpus,
│     ["learning", "network"];  # Seed words
│     metric=PMI,
│     depth=2,
│     min_score=2.0,
│     max_neighbors=5,
│     windowsize=5,
│     minfreq=1
│ )
│ 
│ println("\nCollocation Network:")
│ println("  Nodes: $(length(network.nodes))")
│ println("  Edges: $(nrow(network.edges))")
│ 
│ if !isempty(network.edges)
│     println("\nStrongest connections:")
│     for row in eachrow(first(sort(network.edges, :Weight, rev=true), 5))
│         println("  $(row.Source) → $(row.Target): $(round(row.Weight, digits=2))")
│     end
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:283-308
│ ```@example network
│ using TextAssociations
│ 
│ # Build collocation network
│ network = colloc_graph(
│     corpus,
│     ["learning", "network"];  # Seed words
│     metric=PMI,
│     depth=2,
│     min_score=2.0,
│     max_neighbors=5,
│     windowsize=5,
│     minfreq=1
│ )
│ 
│ println("\nCollocation Network:")
│ println("  Nodes: $(length(network.nodes))")
│ println("  Edges: $(nrow(network.edges))")
│ 
│ if !isempty(network.edges)
│     println("\nStrongest connections:")
│     for row in eachrow(first(sort(network.edges, :Weight, rev=true), 5))
│         println("  $(row.Source) → $(row.Target): $(round(row.Weight, digits=2))")
│     end
│ end
│ ```
│   exception = (UndefVarError(:corpus, Main.__atexample__named__network), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__network at statement 7, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function batch_analyze_node(corpus::Corpus, nodes::Vector{String}, batch_size::Int=10)
│     all_results = Dict{String, DataFrame}()
│ 
│     for batch_start in 1:batch_size:length(nodes)
│         batch_end = min(batch_start + batch_size - 1, length(nodes))
│         batch_nodes = nodes[batch_start:batch_end]
│ 
│         println("Processing batch: nodes $batch_start-$batch_end")
│ 
│         # Analyze batch
│         batch_analysis = analyze_nodes(
│             corpus, batch_nodes, [PMI];
│             windowsize=5, minfreq=1
│         )
│ 
│         # Store results
│         for (node, results) in batch_analysis.results
│             all_results[node] = results
│         end
│ 
│         # Force garbage collection between batches
│         GC.gc()
│     end
│ 
│     return all_results
│ end
│ 
│ # Example with many nodes
│ many_nodes = ["machine", "learning", "deep", "neural", "network",
│               "algorithm", "data", "pattern"]
│ 
│ batch_results = batch_analyze_node(corpus, many_nodes, 3)
│ println("\nBatch processing complete: $(length(batch_results)) nodes analyzed")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:314-350
│ ```@example batch
│ using TextAssociations
│ 
│ function batch_analyze_node(corpus::Corpus, nodes::Vector{String}, batch_size::Int=10)
│     all_results = Dict{String, DataFrame}()
│ 
│     for batch_start in 1:batch_size:length(nodes)
│         batch_end = min(batch_start + batch_size - 1, length(nodes))
│         batch_nodes = nodes[batch_start:batch_end]
│ 
│         println("Processing batch: nodes $batch_start-$batch_end")
│ 
│         # Analyze batch
│         batch_analysis = analyze_nodes(
│             corpus, batch_nodes, [PMI];
│             windowsize=5, minfreq=1
│         )
│ 
│         # Store results
│         for (node, results) in batch_analysis.results
│             all_results[node] = results
│         end
│ 
│         # Force garbage collection between batches
│         GC.gc()
│     end
│ 
│     return all_results
│ end
│ 
│ # Example with many nodes
│ many_nodes = ["machine", "learning", "deep", "neural", "network",
│               "algorithm", "data", "pattern"]
│ 
│ batch_results = batch_analyze_node(corpus, many_nodes, 3)
│ println("\nBatch processing complete: $(length(batch_results)) nodes analyzed")
│ ```
│   exception = (UndefVarError(:corpus, Main.__atexample__named__batch), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__batch at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function stream_analyze(file_pattern::String, node::String)
│     aggregated_scores = Dict{String, Float64}()
│     doc_count = 0
│ 
│     # Process files one at a time
│     for file in glob(file_pattern)
│         # Read single file
│         text = read(file, String)
│ 
│         # Analyze
│         ct = ContingencyTable(text, node, 5, 1)
│         results = assoc_score(PMI, ct; scores_only=false)
│ 
│         # Aggregate results
│         for row in eachrow(results)
│             collocate = String(row.Collocate)
│             score = row.PMI
│ 
│             # Running average
│             current = get(aggregated_scores, collocate, 0.0)
│             aggregated_scores[collocate] = (current * doc_count + score) / (doc_count + 1)
│         end
│ 
│         doc_count += 1
│     end
│ 
│     return aggregated_scores, doc_count
│ end
│ 
│ println("Streaming analysis function defined for large corpora")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function filter_corpus(corpus::Corpus, min_length::Int, max_length::Int)
│     filtered_docs = StringDocument[]
│ 
│     for doc in corpus.documents
│         doc_length = length(tokens(doc))
│         if min_length <= doc_length <= max_length
│             push!(filtered_docs, doc)
│         end
│     end
│ 
│     return Corpus(filtered_docs; norm_config=corpus.norm_config)
│ end
│ 
│ # Filter corpus by document length
│ filtered = filter_corpus(corpus, 5, 15)
│ println("Filtered corpus: $(length(filtered.documents)) documents")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:393-412
│ ```@example filtering
│ using TextAssociations
│ 
│ function filter_corpus(corpus::Corpus, min_length::Int, max_length::Int)
│     filtered_docs = StringDocument[]
│ 
│     for doc in corpus.documents
│         doc_length = length(tokens(doc))
│         if min_length <= doc_length <= max_length
│             push!(filtered_docs, doc)
│         end
│     end
│ 
│     return Corpus(filtered_docs; norm_config=corpus.norm_config)
│ end
│ 
│ # Filter corpus by document length
│ filtered = filter_corpus(corpus, 5, 15)
│ println("Filtered corpus: $(length(filtered.documents)) documents")
│ ```
│   exception = (UndefVarError(:corpus, Main.__atexample__named__filtering), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__filtering at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function filter_vocabulary(corpus::Corpus, min_freq::Int, max_freq_ratio::Float64)
│     # Count token frequencies
│     token_counts = Dict{String, Int}()
│ 
│     for doc in corpus.documents
│         for token in tokens(doc)
│             token_counts[token] = get(token_counts, token, 0) + 1
│         end
│     end
│ 
│     # Filter vocabulary
│     total_docs = length(corpus.documents)
│     max_freq = total_docs * max_freq_ratio
│ 
│     filtered_vocab = OrderedDict{String, Int}()
│     idx = 0
│ 
│     for (token, count) in token_counts
│         if min_freq <= count <= max_freq
│             idx += 1
│             filtered_vocab[token] = idx
│         end
│     end
│ 
│     println("Vocabulary filtered: $(length(corpus.vocabulary)) → $(length(filtered_vocab))")
│ 
│     return filtered_vocab
│ end
│ 
│ filtered_vocab = filter_vocabulary(corpus, 1, 0.8)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:416-449
│ ```@example vocab_filter
│ using TextAssociations
│ 
│ function filter_vocabulary(corpus::Corpus, min_freq::Int, max_freq_ratio::Float64)
│     # Count token frequencies
│     token_counts = Dict{String, Int}()
│ 
│     for doc in corpus.documents
│         for token in tokens(doc)
│             token_counts[token] = get(token_counts, token, 0) + 1
│         end
│     end
│ 
│     # Filter vocabulary
│     total_docs = length(corpus.documents)
│     max_freq = total_docs * max_freq_ratio
│ 
│     filtered_vocab = OrderedDict{String, Int}()
│     idx = 0
│ 
│     for (token, count) in token_counts
│         if min_freq <= count <= max_freq
│             idx += 1
│             filtered_vocab[token] = idx
│         end
│     end
│ 
│     println("Vocabulary filtered: $(length(corpus.vocabulary)) → $(length(filtered_vocab))")
│ 
│     return filtered_vocab
│ end
│ 
│ filtered_vocab = filter_vocabulary(corpus, 1, 0.8)
│ ```
│   exception = (UndefVarError(:corpus, Main.__atexample__named__vocab_filter), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__vocab_filter at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations, CSV
│ 
│ # Analyze and save results
│ results = analyze_node(corpus, "learning", PMI)
│ 
│ # Save to CSV
│ temp_file = tempname() * ".csv"
│ CSV.write(temp_file, results)
│ println("Results saved to temporary file")
│ 
│ # Save with metadata
│ results_with_meta = copy(results)
│ metadata!(results_with_meta, "corpus_size", length(corpus.documents), style=:note)
│ metadata!(results_with_meta, "analysis_date", today(), style=:note)
│ 
│ # Clean up
│ rm(temp_file)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:455-473
│ ```@example export
│ using TextAssociations, CSV
│ 
│ # Analyze and save results
│ results = analyze_node(corpus, "learning", PMI)
│ 
│ # Save to CSV
│ temp_file = tempname() * ".csv"
│ CSV.write(temp_file, results)
│ println("Results saved to temporary file")
│ 
│ # Save with metadata
│ results_with_meta = copy(results)
│ metadata!(results_with_meta, "corpus_size", length(corpus.documents), style=:note)
│ metadata!(results_with_meta, "analysis_date", today(), style=:note)
│ 
│ # Clean up
│ rm(temp_file)
│ ```
│   exception = (ArgumentError("Package CSV not found in current path.\n- Run `import Pkg; Pkg.add(\"CSV\")` to install the CSV package."), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x000000011dc99232, Ptr{Nothing} @0x000000011dc99265, Ptr{Nothing} @0x0000000107d59b33, Ptr{Nothing} @0x000000011e017f57, Ptr{Nothing} @0x000000011d99c515, Ptr{Nothing} @0x0000000107d82fe1, Ptr{Nothing} @0x0000000107d82198, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function export_analysis(analysis::MultiNodeAnalysis, base_path::String)
│     # Export as CSV
│     write_results(analysis, base_path * ".csv"; format=:csv)
│ 
│     # Export as JSON
│     write_results(analysis, base_path * ".json"; format=:json)
│ 
│     # Export summary
│     summary = DataFrame(
│         Node = analysis.nodes,
│         NumCollocates = [nrow(analysis.results[n]) for n in analysis.nodes],
│         WindowSize = analysis.parameters[:windowsize],
│         MinFreq = analysis.parameters[:minfreq]
│     )
│ 
│     CSV.write(base_path * "_summary.csv", summary)
│ 
│     println("Exported to multiple formats")
│ end
│ 
│ # Example (would create files)
│ # export_analysis(analysis, "corpus_analysis")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function diagnose_corpus(corpus::Corpus)
│     println("Corpus Diagnostics:")
│     println("="^40)
│ 
│     # Check document distribution
│     doc_lengths = [length(tokens(doc)) for doc in corpus.documents]
│     println("Document lengths:")
│     println("  Min: $(minimum(doc_lengths))")
│     println("  Max: $(maximum(doc_lengths))")
│     println("  Mean: $(round(mean(doc_lengths), digits=1))")
│ 
│     # Check vocabulary
│     println("\nVocabulary:")
│     println("  Size: $(length(corpus.vocabulary))")
│ 
│     # Check for issues
│     if minimum(doc_lengths) < 5
│         println("\n⚠ Warning: Very short documents detected")
│     end
│ 
│     if maximum(doc_lengths) > 10000
│         println("\n⚠ Warning: Very long documents may slow processing")
│     end
│ 
│     if length(corpus.vocabulary) > 100000
│         println("\n⚠ Warning: Large vocabulary may require more memory")
│     end
│ end
│ 
│ diagnose_corpus(corpus)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/corpus_analysis.md:537-570
│ ```@example troubleshoot
│ using TextAssociations
│ 
│ function diagnose_corpus(corpus::Corpus)
│     println("Corpus Diagnostics:")
│     println("="^40)
│ 
│     # Check document distribution
│     doc_lengths = [length(tokens(doc)) for doc in corpus.documents]
│     println("Document lengths:")
│     println("  Min: $(minimum(doc_lengths))")
│     println("  Max: $(maximum(doc_lengths))")
│     println("  Mean: $(round(mean(doc_lengths), digits=1))")
│ 
│     # Check vocabulary
│     println("\nVocabulary:")
│     println("  Size: $(length(corpus.vocabulary))")
│ 
│     # Check for issues
│     if minimum(doc_lengths) < 5
│         println("\n⚠ Warning: Very short documents detected")
│     end
│ 
│     if maximum(doc_lengths) > 10000
│         println("\n⚠ Warning: Very long documents may slow processing")
│     end
│ 
│     if length(corpus.vocabulary) > 100000
│         println("\n⚠ Warning: Large vocabulary may require more memory")
│     end
│ end
│ 
│ diagnose_corpus(corpus)
│ ```
│   exception = (UndefVarError(:corpus, Main.__atexample__named__troubleshoot), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dd007e, Ptr{Nothing} @0x0000000107d659b6, Ptr{Nothing} @0x0000000107d662ff, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__troubleshoot at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Running ExpanderPipeline on guide/preprocessing.md
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:54
┌ Debug: Evaluating @meta block:
│ CurrentModule = TextAssociations
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:337
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Default configuration
│ default_config = TextNorm()
│ 
│ # Custom configuration
│ custom_config = TextNorm(
│     strip_case=true,           # Lowercase text
│     strip_accents=false,       # Keep diacritics
│     unicode_form=:NFC,         # Unicode normalization
│     strip_punctuation=true,    # Remove punctuation
│     punctuation_to_space=true, # Replace punct with space
│     normalize_whitespace=true, # Collapse multiple spaces
│     strip_whitespace=false,    # Don't remove all spaces
│     use_prepare=false         # Don't use TextAnalysis pipeline
│ )
│ 
│ println("Default settings:")
│ for field in fieldnames(TextNorm)
│     println("  $field: $(getfield(default_config, field))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = "The IBM CEO visited NASA headquarters."
│ 
│ # Keep original case
│ ct_case = ContingencyTable(text, "IBM", 5, 1;
│     norm_config=TextNorm(strip_case=false))
│ results_case = assoc_score(PMI, ct_case)
│ 
│ # Normalize to lowercase
│ ct_lower = ContingencyTable(text, "ibm", 5, 1;
│     norm_config=TextNorm(strip_case=true))
│ results_lower = assoc_score(PMI, ct_lower)
│ 
│ println("With case preservation: $(nrow(results_case)) collocates")
│ println("With lowercasing: $(nrow(results_lower)) collocates")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/preprocessing.md:41-58
│ ```@example case
│ using TextAssociations
│ 
│ text = "The IBM CEO visited NASA headquarters."
│ 
│ # Keep original case
│ ct_case = ContingencyTable(text, "IBM", 5, 1;
│     norm_config=TextNorm(strip_case=false))
│ results_case = assoc_score(PMI, ct_case)
│ 
│ # Normalize to lowercase
│ ct_lower = ContingencyTable(text, "ibm", 5, 1;
│     norm_config=TextNorm(strip_case=true))
│ results_lower = assoc_score(PMI, ct_lower)
│ 
│ println("With case preservation: $(nrow(results_case)) collocates")
│ println("With lowercasing: $(nrow(results_lower)) collocates")
│ ```
│   exception = (MethodError(Core.kwcall, ((norm_config = TextNorm(false, false, :NFC, true, true, true, false, false),), ContingencyTable, "The IBM CEO visited NASA headquarters.", "IBM", 5, 1), 0x0000000000006ac5), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__case at statement 11, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = "Well-designed, user-friendly interface; however, performance issues..."
│ 
│ # Different punctuation strategies
│ configs = [
│     ("Remove", TextNorm(strip_punctuation=true, punctuation_to_space=false)),
│     ("To space", TextNorm(strip_punctuation=true, punctuation_to_space=true)),
│     ("Keep", TextNorm(strip_punctuation=false))
│ ]
│ 
│ for (name, config) in configs
│     doc = prep_string(text; config.config)
│     println("$name: '$(text(doc))'")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/preprocessing.md:62-78
│ ```@example punctuation
│ using TextAssociations
│ 
│ text = "Well-designed, user-friendly interface; however, performance issues..."
│ 
│ # Different punctuation strategies
│ configs = [
│     ("Remove", TextNorm(strip_punctuation=true, punctuation_to_space=false)),
│     ("To space", TextNorm(strip_punctuation=true, punctuation_to_space=true)),
│     ("Keep", TextNorm(strip_punctuation=false))
│ ]
│ 
│ for (name, config) in configs
│     doc = prep_string(text; config.config)
│     println("$name: '$(text(doc))'")
│ end
│ ```
│   exception = (ErrorException("type TextNorm has no field config"), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107dcfda9, Ptr{Nothing} @0x0000000107dd00fc, Ptr{Nothing} @0x000000019ed7d454, Ptr{Nothing} @0x000000019ed7d492, Ptr{Nothing} @0x000000019edcd848, Ptr{Nothing} @0x0000000107d828d5, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text = "Multiple   spaces    and\t\ttabs\n\neverywhere"
│ 
│ # Normalize whitespace
│ normalized = prep_string(text;
│     norm_config=TextNorm(normalize_whitespace=true))
│ println("Normalized: '$(text(normalized))'")
│ 
│ # Strip all whitespace (for certain languages)
│ stripped = prep_string(text;
│     norm_config=TextNorm(strip_whitespace=true))
│ println("Stripped: '$(text(stripped))'")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/preprocessing.md:82-96
│ ```@example whitespace
│ using TextAssociations
│ 
│ text = "Multiple   spaces    and\t\ttabs\n\neverywhere"
│ 
│ # Normalize whitespace
│ normalized = prep_string(text;
│     norm_config=TextNorm(normalize_whitespace=true))
│ println("Normalized: '$(text(normalized))'")
│ 
│ # Strip all whitespace (for certain languages)
│ stripped = prep_string(text;
│     norm_config=TextNorm(strip_whitespace=true))
│ println("Stripped: '$(text(stripped))'")
│ ```
│   exception = (MethodError(Core.kwcall, ((norm_config = TextNorm(true, false, :NFC, true, true, true, false, false),), TextAssociations.prep_string, "Multiple   spaces    and\t\ttabs\n\neverywhere"), 0x0000000000006ac9), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__whitespace at statement 11, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Greek text with tonos marks
│ greek = "Η ανάλυση κειμένου είναι σημαντική"
│ 
│ # French text with accents
│ french = "L'analyse détaillée révèle des résultats intéressants"
│ 
│ # Spanish text
│ spanish = "El análisis lingüístico computacional avanzó rápidamente"
│ 
│ function compare_accent_handling(text::String, lang::String)
│     println("\n$lang text:")
│ 
│     # With accents
│     with_config = TextNorm(strip_accents=false)
│     with_doc = prep_string(text; norm_config=with_config)
│     println("  With accents: '$(text(with_doc))'")
│ 
│     # Without accents
│     without_config = TextNorm(strip_accents=true)
│     without_doc = prep_string(text; norm_config=without_config)
│     println("  Without accents: '$(text(without_doc))'")
│ end
│ 
│ compare_accent_handling(greek, "Greek")
│ compare_accent_handling(french, "French")
│ compare_accent_handling(spanish, "Spanish")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/preprocessing.md:102-131
│ ```@example accents
│ using TextAssociations
│ 
│ # Greek text with tonos marks
│ greek = "Η ανάλυση κειμένου είναι σημαντική"
│ 
│ # French text with accents
│ french = "L'analyse détaillée révèle des résultats intéressants"
│ 
│ # Spanish text
│ spanish = "El análisis lingüístico computacional avanzó rápidamente"
│ 
│ function compare_accent_handling(text::String, lang::String)
│     println("\n$lang text:")
│ 
│     # With accents
│     with_config = TextNorm(strip_accents=false)
│     with_doc = prep_string(text; norm_config=with_config)
│     println("  With accents: '$(text(with_doc))'")
│ 
│     # Without accents
│     without_config = TextNorm(strip_accents=true)
│     without_doc = prep_string(text; norm_config=without_config)
│     println("  Without accents: '$(text(without_doc))'")
│ end
│ 
│ compare_accent_handling(greek, "Greek")
│ compare_accent_handling(french, "French")
│ compare_accent_handling(spanish, "Spanish")
│ ```
│   exception = (MethodError(Core.kwcall, ((norm_config = TextNorm(true, false, :NFC, true, true, true, false, false),), TextAssociations.prep_string, "Η ανάλυση κειμένου είναι σημαντική"), 0x0000000000006acc), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edce7c3, Ptr{Nothing} @0x000000019edce7fd, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__accents at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations, Unicode
│ 
│ # Same character in different forms
│ text_nfc = "café"  # NFC: é as single character
│ text_nfd = Unicode.normalize("café", :NFD)  # NFD: e + combining accent
│ 
│ println("Visual: both look like 'café'")
│ println("NFC length: $(length(text_nfc))")
│ println("NFD length: $(length(text_nfd))")
│ println("Equal? ", text_nfc == text_nfd)
│ 
│ # TextNorm handles this automatically
│ config_nfc = TextNorm(unicode_form=:NFC)
│ config_nfd = TextNorm(unicode_form=:NFD)
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ greek_text = """
│ Η φιλοσοφία και η επιστήμη συνδέονται στενά.
│ Οι Έλληνες φιλόσοφοι επηρέασαν τη σκέψη.
│ """
│ 
│ # Greek-specific configuration
│ greek_config = TextNorm(
│     strip_case=true,      # Greek has case
│     strip_accents=true,   # Remove tonos/dialytika
│     unicode_form=:NFD,    # Better accent stripping
│     strip_punctuation=true
│ )
│ 
│ ct = ContingencyTable(greek_text, "φιλοσοφία", 5, 1;
│     norm_config=greek_config)
│ results = assoc_score(PMI, ct)
│ 
│ println("Greek collocations (normalized):")
│ for row in eachrow(results)
│     println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/preprocessing.md:167-191
│ ```@example greek_prep
│ using TextAssociations
│ 
│ greek_text = """
│ Η φιλοσοφία και η επιστήμη συνδέονται στενά.
│ Οι Έλληνες φιλόσοφοι επηρέασαν τη σκέψη.
│ """
│ 
│ # Greek-specific configuration
│ greek_config = TextNorm(
│     strip_case=true,      # Greek has case
│     strip_accents=true,   # Remove tonos/dialytika
│     unicode_form=:NFD,    # Better accent stripping
│     strip_punctuation=true
│ )
│ 
│ ct = ContingencyTable(greek_text, "φιλοσοφία", 5, 1;
│     norm_config=greek_config)
│ results = assoc_score(PMI, ct)
│ 
│ println("Greek collocations (normalized):")
│ for row in eachrow(results)
│     println("  $(row.Collocate): PMI=$(round(row.PMI, digits=2))")
│ end
│ ```
│   exception = (MethodError(Core.kwcall, ((norm_config = TextNorm(true, true, :NFD, true, true, true, false, false),), ContingencyTable, "Η φιλοσοφία και η επιστήμη συνδέονται στενά.\nΟι Έλληνες φιλόσοφοι επηρέασαν τη σκέψη.\n", "φιλοσοφία", 5, 1), 0x0000000000006ad0), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__greek_prep at statement 5, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ # Chinese text (no spaces between words)
│ chinese = "机器学习是人工智能的重要组成部分"
│ 
│ # Japanese (mixed scripts)
│ japanese = "機械学習はAIの重要な分野です"
│ 
│ # CJK-specific configuration
│ cjk_config = TextNorm(
│     strip_case=false,     # No case in CJK
│     strip_accents=false,  # No accents
│     strip_whitespace=true, # Remove spaces
│     strip_punctuation=true
│ )
│ 
│ # Note: Proper CJK processing would require word segmentation
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ arabic = "التعلم الآلي يحول البيانات إلى معرفة"
│ 
│ # Arabic-specific configuration
│ arabic_config = TextNorm(
│     strip_case=false,      # No case in Arabic
│     strip_accents=false,   # Keep diacritics
│     unicode_form=:NFC,     # Standard form
│     strip_punctuation=true,
│     normalize_whitespace=true
│ )
│ 
│ # Right-to-left text handling is automatic in Julia
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ function custom_preprocess(text::String)
│     # Step 1: Remove URLs
│     text = replace(text, r"https?://[^\s]+" => "[URL]")
│ 
│     # Step 2: Remove email addresses
│     text = replace(text, r"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b" => "[EMAIL]")
│ 
│     # Step 3: Expand contractions
│     contractions = Dict(
│         "don't" => "do not",
│         "won't" => "will not",
│         "can't" => "cannot",
│         "n't" => " not",
│         "'re" => " are",
│         "'ve" => " have",
│         "'ll" => " will",
│         "'d" => " would",
│         "'m" => " am"
│     )
│ 
│     for (contraction, expansion) in contractions
│         text = replace(text, contraction => expansion)
│     end
│ 
│     # Step 4: Standard normalization
│     config = TextNorm(
│         strip_case=true,
│         strip_punctuation=true,
│         normalize_whitespace=true
│     )
│ 
│     doc = prep_string(text; norm_config=config)
│     return text(doc)
│ end
│ 
│ # Test custom preprocessing
│ test_text = "Don't forget to check https://example.com and email me at user@example.com"
│ processed = custom_preprocess(test_text)
│ println("Original: $test_text")
│ println("Processed: $processed")
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to run `@example` block in docs/src/guide/preprocessing.md:238-281
│ ```@example custom_pipeline
│ using TextAssociations
│ 
│ function custom_preprocess(text::String)
│     # Step 1: Remove URLs
│     text = replace(text, r"https?://[^\s]+" => "[URL]")
│ 
│     # Step 2: Remove email addresses
│     text = replace(text, r"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b" => "[EMAIL]")
│ 
│     # Step 3: Expand contractions
│     contractions = Dict(
│         "don't" => "do not",
│         "won't" => "will not",
│         "can't" => "cannot",
│         "n't" => " not",
│         "'re" => " are",
│         "'ve" => " have",
│         "'ll" => " will",
│         "'d" => " would",
│         "'m" => " am"
│     )
│ 
│     for (contraction, expansion) in contractions
│         text = replace(text, contraction => expansion)
│     end
│ 
│     # Step 4: Standard normalization
│     config = TextNorm(
│         strip_case=true,
│         strip_punctuation=true,
│         normalize_whitespace=true
│     )
│ 
│     doc = prep_string(text; norm_config=config)
│     return text(doc)
│ end
│ 
│ # Test custom preprocessing
│ test_text = "Don't forget to check https://example.com and email me at user@example.com"
│ processed = custom_preprocess(test_text)
│ println("Original: $test_text")
│ println("Processed: $processed")
│ ```
│   exception = (MethodError(Core.kwcall, ((norm_config = TextNorm(true, false, :NFC, true, true, true, false, false),), TextAssociations.prep_string, "Do not forget to check [URL] and email me at [EMAIL]"), 0x0000000000006ad7), Union{Ptr{Nothing}, Base.InterpreterIP}[Ptr{Nothing} @0x0000000107d4525d, Ptr{Nothing} @0x0000000107d4518f, Ptr{Nothing} @0x0000000107d4a523, Ptr{Nothing} @0x000000019edcead1, Ptr{Nothing} @0x000000019edcee19, Ptr{Nothing} @0x0000000107d680ed, Ptr{Nothing} @0x0000000107d6789d, Ptr{Nothing} @0x0000000107d66585, Ptr{Nothing} @0x0000000107d66c28, Base.InterpreterIP in top-level CodeInfo for Main.__atexample__named__custom_pipeline at statement 0, Ptr{Nothing} @0x0000000107d82996, Ptr{Nothing} @0x0000000107d826fe, Ptr{Nothing} @0x0000000107d835b5, Ptr{Nothing} @0x000000019e5b0b90, Ptr{Nothing} @0x000000019e5b0e52, Ptr{Nothing} @0x000000019e5b13dc, Ptr{Nothing} @0x000000019e5b18db, Ptr{Nothing} @0x000000019e5b198d, Ptr{Nothing} @0x00000001bbb38951, Ptr{Nothing} @0x000000019e5af8be, Ptr{Nothing} @0x000000019e5afd2a, Ptr{Nothing} @0x000000019e5aea3d, Ptr{Nothing} @0x000000019e5aeb0d, Ptr{Nothing} @0x000000019e5a57ff])
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
┌ Debug: Evaluating @example block:
│ using TextAssociations
│ 
│ text_with_special = "Price: $99.99 | Temperature: 25°C | Math: x² + y² = r²"
│ 
│ # Different strategies for special characters
│ configs = [
│     ("Keep symbols", TextNorm(strip_punctuation=false)),
│     ("Remove symbols", TextNorm(strip_punctuation=true)),
│     ("Normalize", TextNorm(unicode_form=:NFKC))  # Converts ² to 2
│ ]
│ 
│ for (name, config) in configs
│     doc = prep_string(text_with_special; norm_config=config)
│     println("$name: '$(text(doc))'")
│ end
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/expander_pipeline.jl:837
┌ Warning: failed to parse exception in docs/src/guide/preprocessing.md
│   exception = Base.Meta.ParseError("ParseError:\n# Error @ none:1:30\ntext_with_special = \"Price: \$99.99 | Temperature: 25°C | Math: x² + y² = r²\"\n#                            └ ── identifier or parenthesized expression expected after \$ in string", Base.JuliaSyntax.ParseError(Base.JuliaSyntax.SourceFile("text_with_special = \"Price: \$99.99 | Temperature: 25°C | Math: x² + y² = r²\"\n\n# Different strategies for special characters\n", 24, "none", 1, [1, 82, 83, 129]), Base.JuliaSyntax.Diagnostic[Base.JuliaSyntax.Diagnostic(54, 53, :error, "identifier or parenthesized expression expected after \$ in string")], :none))
└ @ Documenter /Users/atantos/.julia/packages/Documenter/eoWm2/src/utilities/utilities.jl:49
