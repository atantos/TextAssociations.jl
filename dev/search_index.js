var documenterSearchIndex = {"docs":
[{"location":"howto.html#TextAssociations","page":"Guided Examples","title":"TextAssociations","text":"","category":"section"},{"location":"howto.html","page":"Guided Examples","title":"Guided Examples","text":"Documentation for TextAssociations.","category":"page"},{"location":"howto.html#Guide","page":"Guided Examples","title":"Guide","text":"","category":"section"},{"location":"theory.html#TextAssociations","page":"Theory","title":"TextAssociations","text":"","category":"section"},{"location":"theory.html","page":"Theory","title":"Theory","text":"Documentation for TextAssociations.","category":"page"},{"location":"theory.html#Association-metrics","page":"Theory","title":"Association metrics","text":"","category":"section"},{"location":"theory.html","page":"Theory","title":"Theory","text":"TextAssociations.jl implements the list of all association measures from Pecina's paper.","category":"page"},{"location":"theory.html#Association-Measures","page":"Theory","title":"Association Measures","text":"","category":"section"},{"location":"theory.html","page":"Theory","title":"Theory","text":"Joint probability\nConditional probability\nReverse conditional probability\nMutual dependency\nLog frequency biased mutual dependency\nNormalized expectation\nMutual expectation\nSalience\nPearson's chitest\nSquared log likelihood ratio\nFirst Kulczynsky\nFager\nUnigram subtuples\nU cost\nS cost\nR cost\nT combined cost\nKappa\nJ-measure\nGini index\nConfidence\nLaplace\nConviction\nCertainity\nAdded value\nCollective\nKlosgen","category":"page"},{"location":"theory.html#Dependency-Measures","page":"Theory","title":"Dependency Measures","text":"","category":"section"},{"location":"theory.html","page":"Theory","title":"Theory","text":"Pointwise mutual information\nLog frequency biased mutual dependency\nNormalized expectation\nMutual expectation\nSalience","category":"page"},{"location":"theory.html#Similarity-Measures","page":"Theory","title":"Similarity Measures","text":"","category":"section"},{"location":"theory.html","page":"Theory","title":"Theory","text":"Jaccard\nSokal-Michener\nRussel-Rao\nHamann\nPointwise mutual information\nLog likelihood ratio\nPhi coefficient\nRogers-Tanimoto\nSecond Kulczynski","category":"page"},{"location":"theory.html#Correlation-Measures","page":"Theory","title":"Correlation Measures","text":"","category":"section"},{"location":"theory.html","page":"Theory","title":"Theory","text":"Pearson","category":"page"},{"location":"theory.html#Statistical-Tests","page":"Theory","title":"Statistical Tests","text":"","category":"section"},{"location":"theory.html","page":"Theory","title":"Theory","text":"t test\nz score\nPoison significance measure\nFisher's exact test","category":"page"},{"location":"theory.html#Coefficients-and-Indices","page":"Theory","title":"Coefficients and Indices","text":"","category":"section"},{"location":"theory.html","page":"Theory","title":"Theory","text":"Yule's omega\nDriver-Kroeber\nFifth Sokal-Sneath\nThird Sokal-Sneath\nSecond Sokal-Sneath\nFourth Sokal-Sneath\nPiatersky-Shapiro\nOdds ratio\nYule's Q","category":"page"},{"location":"theory.html#Miscellaneous-Measures","page":"Theory","title":"Miscellaneous Measures","text":"","category":"section"},{"location":"theory.html","page":"Theory","title":"Theory","text":"Mountford\nGower","category":"page"},{"location":"reference.html#TextAssociations","page":"API Reference","title":"TextAssociations","text":"","category":"section"},{"location":"reference.html","page":"API Reference","title":"API Reference","text":"Documentation for TextAssociations.","category":"page"},{"location":"reference.html","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"reference.html#TextAssociations.AssociationDataFormat","page":"API Reference","title":"TextAssociations.AssociationDataFormat","text":"Abstract type for data formats used in association computations.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.AssociationMetric","page":"API Reference","title":"TextAssociations.AssociationMetric","text":"Abstract type for all association metrics.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.CollocationNetwork","page":"API Reference","title":"TextAssociations.CollocationNetwork","text":"CollocationNetwork\n\nNetwork representation of word collocations.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.Concordance","page":"API Reference","title":"TextAssociations.Concordance","text":"Concordance\n\nKWIC (Key Word In Context) concordance lines.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.ContingencyTable","page":"API Reference","title":"TextAssociations.ContingencyTable","text":"ContingencyTable <: AssociationDataFormat\n\nRepresents a contingency table for word co-occurrence analysis.\n\nFields\n\ncon_tbl: Lazy-loaded contingency table data\nnode: Target word\nwindowsize: Context window size\nminfreq: Minimum frequency threshold\ninput_ref: Reference to the processed input document\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.Corpus","page":"API Reference","title":"TextAssociations.Corpus","text":"Corpus <: AssociationDataFormat\n\nRepresents a collection of documents for corpus-level analysis.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.CorpusContingencyTable","page":"API Reference","title":"TextAssociations.CorpusContingencyTable","text":"CorpusContingencyTable\n\nAggregated contingency table across an entire corpus.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.LazyInput","page":"API Reference","title":"TextAssociations.LazyInput","text":"LazyInput\n\nWrapper for lazily storing and accessing the processed input document. This is used by metrics like Lexical Gravity that need access to the  original text beyond just the contingency table.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.LazyProcess","page":"API Reference","title":"TextAssociations.LazyProcess","text":"LazyProcess{T,R}\n\nLazy evaluation wrapper for deferred computations. Stores a function that computes a result when first needed and caches it.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.MultiNodeAnalysis","page":"API Reference","title":"TextAssociations.MultiNodeAnalysis","text":"MultiNodeAnalysis\n\nAnalysis results for multiple node words across a corpus.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.SubcorpusComparison","page":"API Reference","title":"TextAssociations.SubcorpusComparison","text":"SubcorpusComparison\n\nComparison of word associations between subcorpora.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations.TemporalCorpusAnalysis","page":"API Reference","title":"TextAssociations.TemporalCorpusAnalysis","text":"TemporalCorpusAnalysis\n\nAnalysis of word associations over time periods.\n\n\n\n\n\n","category":"type"},{"location":"reference.html#TextAssociations._gravity_directional_analysis-Tuple{AssociationDataFormat}","page":"API Reference","title":"TextAssociations._gravity_directional_analysis","text":"Analyze directional preferences (left vs right) for collocations.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations._gravity_original_formula-Tuple{AssociationDataFormat, DataFrames.DataFrame}","page":"API Reference","title":"TextAssociations._gravity_original_formula","text":"The original Daudaravičius & Marcinkevičienė formula. This is the main contribution of their paper.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations._gravity_pmi_weighted-Tuple{AssociationDataFormat, DataFrames.DataFrame}","page":"API Reference","title":"TextAssociations._gravity_pmi_weighted","text":"PMI-weighted gravity (alternative formulation). G = f(w1,w2) × PMI(w1,w2)\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations._gravity_simplified_formula-Tuple{AssociationDataFormat, DataFrames.DataFrame}","page":"API Reference","title":"TextAssociations._gravity_simplified_formula","text":"Simplified gravity formula often used in implementations. G = log₂((f(w1,w2)² × span) / (f(w1) × f(w2)))\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.aggregate_contingency_tables-Tuple{Vector{ContingencyTable}, Int64}","page":"API Reference","title":"TextAssociations.aggregate_contingency_tables","text":"aggregate_contingency_tables(tables::Vector{ContingencyTable}, minfreq::Int) -> DataFrame\n\nAggregate multiple contingency tables into a single table.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.analyze_corpus-Tuple{Corpus, AbstractString, Type{<:AssociationMetric}}","page":"API Reference","title":"TextAssociations.analyze_corpus","text":"analyze_corpus(corpus::Corpus, node::AbstractString, metric::Type{<:AssociationMetric};\n              windowsize::Int=5, minfreq::Int=5) -> DataFrame\n\nAnalyze a single node word across the entire corpus. Returns DataFrame with Node, Collocate, Score, Frequency, and DocFrequency columns.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.analyze_multiple_nodes-Tuple{Corpus, Vector{String}, Vector{DataType}}","page":"API Reference","title":"TextAssociations.analyze_multiple_nodes","text":"analyze_multiple_nodes(corpus::Corpus,\n                      nodes::Vector{String},\n                      metrics::Vector{DataType};\n                      windowsize::Int=5,\n                      minfreq::Int=5,\n                      parallel::Bool=false) -> MultiNodeAnalysis\n\nAnalyze multiple node words with multiple metrics across a corpus. Each result DataFrame now includes the Node column.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.batch_process_corpus-Tuple{Corpus, AbstractString, AbstractString}","page":"API Reference","title":"TextAssociations.batch_process_corpus","text":"batch_process_corpus(corpus::Corpus,\n                    node_file::AbstractString,\n                    output_dir::AbstractString;\n                    metrics::Vector{DataType}=[PMI, LogDice],\n                    windowsize::Int=5,\n                    minfreq::Int=5,\n                    batch_size::Int=100)\n\nProcess a large list of node words in batches. Results include Node column.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.build_collocation_network-Tuple{Corpus, Vector{String}}","page":"API Reference","title":"TextAssociations.build_collocation_network","text":"build_collocation_network(corpus::Corpus,\n                        seed_words::Vector{String};\n                        metric::Type{<:AssociationMetric}=PMI,\n                        depth::Int=2,\n                        min_score::Float64=3.0,\n                        max_neighbors::Int=20) -> CollocationNetwork\n\nBuild a collocation network starting from seed words.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.build_document_term_matrix-Tuple{Vector{TextAnalysis.StringDocument}, OrderedCollections.OrderedDict{String, Int64}}","page":"API Reference","title":"TextAssociations.build_document_term_matrix","text":"build_document_term_matrix(documents, vocabulary) -> SparseMatrixCSC\n\nBuild a document-term matrix from documents.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.calculate_effect_sizes-Tuple{Dict{String, DataFrames.DataFrame}, Type{<:AssociationMetric}}","page":"API Reference","title":"TextAssociations.calculate_effect_sizes","text":"calculate_effect_sizes(results, metric) -> DataFrame\n\nCalculate effect sizes for differences between subcorpora.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.compare_subcorpora-Tuple{Corpus, Symbol, String, Type{<:AssociationMetric}}","page":"API Reference","title":"TextAssociations.compare_subcorpora","text":"compare_subcorpora(corpus::Corpus,\n                  split_field::Symbol,\n                  node::String,\n                  metric::Type{<:AssociationMetric};\n                  windowsize::Int=5,\n                  minfreq::Int=5) -> SubcorpusComparison\n\nCompare word associations across different subcorpora.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.compute_association_trends-Tuple{Dict{String, MultiNodeAnalysis}, Vector{String}, Type{<:AssociationMetric}}","page":"API Reference","title":"TextAssociations.compute_association_trends","text":"compute_association_trends(results_by_period, nodes, metric) -> DataFrame\n\nCompute trend statistics for associations over time.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.concord-Tuple{Corpus, String}","page":"API Reference","title":"TextAssociations.concord","text":"concord(corpus::Corpus,\n                    node::String;\n                    context_size::Int=50,\n                    max_lines::Int=1000) -> Concordance\n\nGenerate KWIC concordance for a node word.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.conttbl","page":"API Reference","title":"TextAssociations.conttbl","text":"conttbl(input_doc::StringDocument, target_word::AbstractString,\n        windowsize::Int64=5, minfreq::Int64=3) -> DataFrame\n\nCompute the contingency table for a target word in a document.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#TextAssociations.corpus_statistics-Tuple{Corpus}","page":"API Reference","title":"TextAssociations.corpus_statistics","text":"corpus_statistics(corpus::Corpus; \n                 include_token_distribution::Bool=true) -> Dict\n\nGet comprehensive statistics about the corpus.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.count_substrings-Tuple{String, String}","page":"API Reference","title":"TextAssociations.count_substrings","text":"count_substrings(text::String, substring::String) -> Int\n\nCount occurrences of a substring in text.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.count_substrings-Tuple{String, Vector{String}}","page":"API Reference","title":"TextAssociations.count_substrings","text":"count_substrings(text::String, substrings::Vector{String}) -> Dict{String,Int}\n\nCount occurrences of multiple substrings in text.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.count_word_frequency-Tuple{TextAnalysis.StringDocument, String}","page":"API Reference","title":"TextAssociations.count_word_frequency","text":"count_word_frequency(doc::StringDocument, word::String) -> Int\n\nCount the frequency of a word in the document.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.coverage_summary-Tuple{Dict}","page":"API Reference","title":"TextAssociations.coverage_summary","text":"coverage_summary(stats::Dict)\n\nPretty print the vocabulary coverage statistics.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.createvocab-Tuple{Union{TextAnalysis.StringDocument, Vector{String}}}","page":"API Reference","title":"TextAssociations.createvocab","text":"createvocab(input::Union{StringDocument,Vector{String}}) -> OrderedDict\n\nCreate vocabulary dictionary from text input.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.eval_lexicalgravity-Tuple{AssociationDataFormat}","page":"API Reference","title":"TextAssociations.eval_lexicalgravity","text":"eval_lexicalgravity(data::AssociationDataFormat; \n                   formula::Symbol=:original)\n\nCompute Lexical Gravity measure based on Daudaravičius & Marcinkevičienė (2004).\n\nArguments\n\ndata: AssociationDataFormat with co-occurrence data\nformula: Which formula to use:\n:original - The main formula from the paper: G→(w1,w2) = log(f→×n+/f1) + log(f←×n-/f2)\n:simplified - Simplified version: G = log₂((f²×span)/(f1×f2))\n:pmi_weighted - PMI-style weighting: G = f(w1,w2) × log((f×N)/(f1×f2))\n\nOriginal Formula from Paper\n\nG→(w1,w2) = log(f→(w1,w2)/f(w1) × n+(w1)) + log(f←(w1,w2)/f(w2) × n-(w2))\n\nWhere:\n\nf→(w1,w2) = frequency of w2 following w1 within window\nf←(w1,w2) = frequency of w1 preceding w2 within window  \nn+(w1) = number of different word types that follow w1\nn-(w2) = number of different word types that precede w2\nf(w1), f(w2) = total frequencies of words\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.evalassoc","page":"API Reference","title":"TextAssociations.evalassoc","text":"evalassoc(metrics::AbstractVector{<:Type{<:AssociationMetric}},\n          inputstring::AbstractString,\n          node::AbstractString,\n          windowsize::Int,\n          minfreq::Int=5;\n          scores_only::Bool=false,\n          tokens::Union{Nothing,Vector{String}}=nothing,\n          kwargs...)\n\nConvenience overload to compute multiple metrics directly from raw text.\n\n\n\n\n\n","category":"function"},{"location":"reference.html#TextAssociations.evalassoc-Tuple{AbstractVector{<:Type{<:AssociationMetric}}, AssociationDataFormat}","page":"API Reference","title":"TextAssociations.evalassoc","text":"evalassoc(metrics::AbstractVector{<:Type{<:AssociationMetric}},\n          x::AssociationDataFormat;\n          scores_only::Bool=false,\n          tokens::Union{Nothing,Vector{String}}=nothing,\n          kwargs...)\n\nEvaluate multiple metrics on CT or CCT.\n\nReturns a DataFrame with one column per metric by default.\nIf scores_only=true, returns Dict{String,Vector{Float64}}.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.evalassoc-Union{Tuple{T}, Tuple{Type{T}, AbstractString, AbstractString, Int64}, Tuple{Type{T}, AbstractString, AbstractString, Int64, Int64}} where T<:AssociationMetric","page":"API Reference","title":"TextAssociations.evalassoc","text":"evalassoc(metricType::Type{<:AssociationMetric},\n          inputstring::AbstractString,\n          node::AbstractString,\n          windowsize::Int,\n          minfreq::Int=5;\n          scores_only::Bool=false,\n          tokens::Union{Nothing,Vector{String}}=nothing,\n          kwargs...)\n\nConvenience overload to compute a metric directly from a raw string.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.evalassoc-Union{Tuple{T}, Tuple{Type{T}, AssociationDataFormat}} where T<:AssociationMetric","page":"API Reference","title":"TextAssociations.evalassoc","text":"evalassoc(metricType::Type{<:AssociationMetric}, x::AssociationDataFormat;\n          scores_only::Bool=false,\n          tokens::Union{Nothing,Vector{String}}=nothing,\n          kwargs...)\n\nEvaluate a metric on any association data format (CT or CCT).\n\nIf the metric requires tokens (e.g., LexicalGravity), pass tokens=... or implement assoc_tokens(::YourType) to supply them automatically.\nReturns a DataFrame by default: [:Node, :Collocate, :Frequency, :<MetricName>].\nIf scores_only=true, returns only the scores Vector.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.evalassoc-Union{Tuple{T}, Tuple{Type{T}, CorpusContingencyTable}} where T<:AssociationMetric","page":"API Reference","title":"TextAssociations.evalassoc","text":"evalassoc(metric::Type{<:AssociationMetric}, cct::CorpusContingencyTable)\n\nEvaluate a metric on a corpus contingency table by wrapping the corpus-level lazy aggregated table into a ContingencyTable without materializing it.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.export_network_to_gephi-Tuple{CollocationNetwork, String, String}","page":"API Reference","title":"TextAssociations.export_network_to_gephi","text":"export_network_to_gephi(network::CollocationNetwork,\n                       nodes_file::String,\n                       edges_file::String)\n\nExport network for visualization in Gephi or similar tools.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.export_results-Tuple{MultiNodeAnalysis, AbstractString}","page":"API Reference","title":"TextAssociations.export_results","text":"export_results(analysis::MultiNodeAnalysis, path::AbstractString; format::Symbol=:csv)\n\nExport analysis results to file. Results now include Node column.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.extract_cached_data-Union{Tuple{LazyProcess{T, R}}, Tuple{R}, Tuple{T}} where {T, R}","page":"API Reference","title":"TextAssociations.extract_cached_data","text":"extract_cached_data(z::LazyProcess{T,R}) -> R\n\nExtract data from a LazyProcess, computing it if necessary.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.extract_document-Tuple{LazyInput}","page":"API Reference","title":"TextAssociations.extract_document","text":"extract_document(input::LazyInput) -> StringDocument\n\nExtract the document from a LazyInput wrapper.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.extract_keywords-Tuple{Corpus}","page":"API Reference","title":"TextAssociations.extract_keywords","text":"extract_keywords(corpus::Corpus;\n                method::Symbol=:tfidf,\n                num_keywords::Int=50,\n                min_doc_freq::Int=3,\n                max_doc_freq_ratio::Float64=0.5) -> DataFrame\n\nExtract keywords from corpus using various methods.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.extract_rake_keywords-Tuple{Corpus, Int64}","page":"API Reference","title":"TextAssociations.extract_rake_keywords","text":"extract_rake_keywords(corpus, num_keywords) -> DataFrame\n\nExtract keywords using RAKE algorithm (placeholder).\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.extract_textrank_keywords-Tuple{Corpus, Int64}","page":"API Reference","title":"TextAssociations.extract_textrank_keywords","text":"extract_textrank_keywords(corpus, num_keywords) -> DataFrame\n\nExtract keywords using TextRank algorithm (placeholder).\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.extract_tfidf_keywords-Tuple{Corpus, Int64, Int64, Float64}","page":"API Reference","title":"TextAssociations.extract_tfidf_keywords","text":"extract_tfidf_keywords(corpus, num_keywords, min_doc_freq, max_doc_freq_ratio) -> DataFrame\n\nExtract keywords using TF-IDF scoring.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.find_following_words-Tuple{TextAnalysis.StringDocument, String, Int64}","page":"API Reference","title":"TextAssociations.find_following_words","text":"find_following_words(doc::StringDocument, word::String, window::Int) -> Set{String}\n\nFind unique words that appear within window words after each occurrence of word in the document.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.find_prior_words-Tuple{TextAnalysis.StringDocument, String, Int64}","page":"API Reference","title":"TextAssociations.find_prior_words","text":"find_prior_words(doc::StringDocument, word::String, window::Int) -> Set{String}\n\nFind unique words that appear within window words before each occurrence of word in the document.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.lexical_gravity_analysis-Tuple{AssociationDataFormat}","page":"API Reference","title":"TextAssociations.lexical_gravity_analysis","text":"lexical_gravity_analysis(data::AssociationDataFormat)\n\nComprehensive analysis using all gravity formulas for comparison. Returns results from all three formulas plus directional analysis.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.listmetrics-Tuple{}","page":"API Reference","title":"TextAssociations.listmetrics","text":"listmetrics() -> Vector{Symbol}\n\nReturns a list of all supported association metrics.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.load_corpus-Tuple{AbstractString}","page":"API Reference","title":"TextAssociations.load_corpus","text":"load_corpus(path::AbstractString; kwargs...) -> Corpus\n\nLoad a corpus from various sources.\n\nArguments\n\npath: Directory path, CSV file, or JSON file containing documents\ntext_column: Column name for text (for CSV/JSON)\nmetadata_columns: Columns to include as metadata\npreprocess: Apply preprocessing (default: true)\nmin_doc_length: Minimum document length in tokens (default: 10)\nmax_doc_length: Maximum document length in tokens (default: nothing)\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.load_corpus_df-Tuple{DataFrames.DataFrame}","page":"API Reference","title":"TextAssociations.load_corpus_df","text":"load_corpus_df(df::DataFrame; kwargs...) -> Corpus\n\nLoad corpus directly from a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.log_safe-Tuple{Real}","page":"API Reference","title":"TextAssociations.log_safe","text":"Safe logarithm that handles zero and negative values.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.perform_statistical_tests-Tuple{Dict{String, DataFrames.DataFrame}, Type{<:AssociationMetric}}","page":"API Reference","title":"TextAssociations.perform_statistical_tests","text":"perform_statistical_tests(results, metric) -> DataFrame\n\nPerform statistical tests between subcorpora.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.prepstring-Tuple{AbstractString}","page":"API Reference","title":"TextAssociations.prepstring","text":"prepstring(input_path::AbstractString; kwargs...) -> StringDocument\n\nPrepare and preprocess text from various sources into a StringDocument.\n\nArguments\n\ninput_path: File path, directory path, or raw text string.\n\nPreprocessing options\n\nstrip_punctuation::Bool=true: Remove punctuation.  \npunctuation_to_space::Bool=true: Replace punctuation with spaces (avoids glued words).  \nstrip_whitespace::Bool=false: Remove whitespace entirely (not recommended).  \nnormalize_whitespace::Bool=true: Collapse multiple spaces to one.  \nstrip_case::Bool=true: Convert to lowercase (Unicode-aware).  \nstrip_accents::Bool=false: Remove diacritics (tonos, dialytika) using Unicode normalization.  \nunicode_form::Symbol=:NFC: Unicode normalization form to apply (:NFC by default).  \nuse_prepare::Bool=false: Apply TextAnalysis prepare! pipeline (disabled by default to protect tonos).\n\nBehavior\n\nText can be provided as a file, directory of .txt files, or raw string.  \nFor directories, all .txt files are concatenated before preprocessing.  \nUnicode normalization (unicode_form) is applied first.  \nIf strip_accents=true, diacritics are removed after normalization.  \nOutput is wrapped in a StringDocument.\n\nReturns\n\nA preprocessed StringDocument object suitable for downstream corpus analysis.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.stream_corpus_analysis-Tuple{AbstractString, AbstractString, Type{<:AssociationMetric}}","page":"API Reference","title":"TextAssociations.stream_corpus_analysis","text":"stream_corpus_analysis(file_pattern::AbstractString,\n                      node::AbstractString,\n                      metric::Type{<:AssociationMetric};\n                      windowsize::Int=5,\n                      chunk_size::Int=1000)\n\nStream-process large corpora without loading everything into memory.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.strip_diacritics-Tuple{AbstractString}","page":"API Reference","title":"TextAssociations.strip_diacritics","text":"strip_diacritics(s::AbstractString; target_form::Symbol = :NFC) -> String\n\nRemove all combining diacritics (e.g., Greek tonos, dialytika) using Unicode normalization.\n\nInternally:\n\ncanonically decomposes as needed,\nstrips combining marks (Mn),\nand normalizes to target_form (default :NFC).\n\nIf you don’t care about the final form, leave target_form at the default.\n\nExample:     julia> strip_diacritics(\"ένα το χελιδόϊι\")     \"ενα το χελιδοιι\"\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.temporal_corpus_analysis-Tuple{Corpus, Vector{String}, Symbol, Type{<:AssociationMetric}}","page":"API Reference","title":"TextAssociations.temporal_corpus_analysis","text":"temporal_corpus_analysis(corpus::Corpus,\n                        nodes::Vector{String},\n                        time_field::Symbol,\n                        metric::Type{<:AssociationMetric};\n                        time_bins::Int=10,\n                        windowsize::Int=5,\n                        minfreq::Int=5) -> TemporalCorpusAnalysis\n\nAnalyze how word associations change over time.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.token_distribution-Tuple{Corpus}","page":"API Reference","title":"TextAssociations.token_distribution","text":"token_distribution(corpus::Corpus) -> DataFrame\n\nAnalyze the distribution of tokens in the corpus.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.tostringvector-Tuple{TextAnalysis.StringDocument}","page":"API Reference","title":"TextAssociations.tostringvector","text":"Convert input to string vector for vocabulary creation.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.vocab_coverage-Tuple{Corpus}","page":"API Reference","title":"TextAssociations.vocab_coverage","text":"vocab_coverage(corpus::Corpus; \n                         percentiles=0.01:0.01:1.0) -> DataFrame\n\nCalculate vocabulary coverage curve showing how many words are needed  to cover various percentages of the corpus. Uses the corpus vocabulary for consistent calculations.\n\n\n\n\n\n","category":"method"},{"location":"reference.html#TextAssociations.@extract_values-Tuple{Any, Vararg{Any}}","page":"API Reference","title":"TextAssociations.@extract_values","text":"@extract_values data a b c d ...\n\nExpands to:\n\ndf = assoc_df(data)\nearly-return Float64[] if df is empty\nlocal bindings a = df.a, b = df.b, ...\n\nWorks for any AssociationDataFormat subtype as long as assoc_df(x) returns a DataFrame with these column names.\n\n\n\n\n\n","category":"macro"},{"location":"index.html#TextAssociations","page":"Intro","title":"TextAssociations","text":"","category":"section"},{"location":"index.html","page":"Intro","title":"Intro","text":"Documentation for TextAssociations.","category":"page"},{"location":"index.html#Install","page":"Intro","title":"Install","text":"","category":"section"},{"location":"index.html","page":"Intro","title":"Intro","text":"julia> add https://github.com/atantos/TextAssociations.jl","category":"page"},{"location":"tutorial.html#TextAssociations","page":"Quick Start","title":"TextAssociations","text":"","category":"section"},{"location":"tutorial.html","page":"Quick Start","title":"Quick Start","text":"Documentation for TextAssociations.","category":"page"},{"location":"tutorial.html#Basics","page":"Quick Start","title":"Basics","text":"","category":"section"}]
}
